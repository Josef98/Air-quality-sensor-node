<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\I2C.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\I2C.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu May 17 11:41:32 2018
<BR><P>
<H3>Maximum Stack Usage =       1068 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ACMP_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[19]">Default_Handler</a> from startup_nano103.o(.text) referenced 4 times from startup_nano103.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[a]">GPABC_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[b]">GPDEF_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[2d]">Get_stamp_us</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[16]">HIRC_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[23]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from nano_support.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from nano_support.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[29]">I2C_MasterReadDataFromSlave</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[2f]">I2C_MasterRx</a> from nano_support.o(.text) referenced from nano_support.o(.text)
 <LI><a href="#[2e]">I2C_MasterTx</a> from nano_support.o(.text) referenced from nano_support.o(.text)
 <LI><a href="#[2a]">I2C_MasterWriteDataToSlave</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[26]">Load_Config</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[27]">Load_State_from_Flash</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[2c]">Output_ready</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[1c]">PDMA_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[1e]">PDWU_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[31]">Reset_Handler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[1a]">SC0_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[1b]">SC1_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[13]">SPI0_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[14]">SPI1_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[15]">SPI2_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[1d]">SPI3_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[2b]">Save_State_to_Flash</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_nano103.o(.text) referenced from startup_nano103.o(.text)
 <LI><a href="#[d]">TMR0_IRQHandler</a> from nano_support.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[e]">TMR1_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[f]">TMR2_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[10]">TMR3_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nano103.o(.text) referenced from startup_nano103.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nano103.o(.text)
 <LI><a href="#[28]">delay_ms</a> from nano_support.o(.text) referenced from main.o(.text)
 <LI><a href="#[30]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[22]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ba]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[130]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SysGet_PLLClockFreq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, system_nano103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UART_GetUartClk
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
</UL>

<P><STRONG><a name="[3f]"></a>SysGet_HCLKFreq</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, system_nano103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[40]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_nano103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, system_nano103.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>Reset_Handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, startup_nano103.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPABC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SYS_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableSysTick
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = main &rArr; bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadDataFromSlave
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d]"></a>TMR0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nano_support.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C_HandleSlaveReadCmd</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_HandleSlaveReadCmd &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTRx
</UL>

<P><STRONG><a name="[54]"></a>I2C_SlaveTRx</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_SlaveTRx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HandleSlaveReadCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C0_IRQHandler &rArr; I2C_SlaveTRx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTRx
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C_MasterRx</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterRx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nano_support.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>I2C_MasterTx</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterTx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nano_support.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>delay_ms</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteDataToSlave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>I2C_MasterWriteDataToSlave</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterWriteDataToSlave &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>I2C_MasterReadDataFromSlave</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_MasterReadDataFromSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>I2C0_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I2C0_Init &rArr; I2C_Open &rArr; I2C_SetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>I2C1_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I2C1_Init &rArr; I2C_Open &rArr; I2C_SetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetBusClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>Get_stamp_us</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Get_stamp_us &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>Load_State_from_Flash</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Load_State_from_Flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>Load_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nano_support.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>Save_State_to_Flash</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Save_State_to_Flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>set_data_flash_base</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nano_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2c]"></a>Output_ready</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nano_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Output_ready &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>bsec_iot_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsec_integration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = bsec_iot_init &rArr; bme680_bsec_update_subscription &rArr; bsec_update_subscription &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_version
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>bsec_iot_loop</STRONG> (Thumb, 318 bytes, Stack size 240 bytes, bsec_integration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = bsec_iot_loop &rArr; bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sensor_control
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadDataFromSlave
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>bme680_get_regs</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_settings
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gas_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_mode
</UL>

<P><STRONG><a name="[7e]"></a>bme680_set_regs</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
</UL>

<P><STRONG><a name="[7f]"></a>bme680_soft_reset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bme680_soft_reset &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mem_page
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
</UL>

<P><STRONG><a name="[64]"></a>bme680_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bme680_init &rArr; get_calib_data &rArr; bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[69]"></a>bme680_set_sensor_mode</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bme680_set_sensor_mode &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[68]"></a>bme680_set_sensor_settings</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme680_set_sensor_settings &rArr; set_gas_config &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[86]"></a>bme680_get_sensor_settings</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, bme680.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gas_config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[6b]"></a>bme680_get_sensor_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bme680_get_sensor_mode &rArr; bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[87]"></a>bme680_set_profile_dur</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bme680.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[6a]"></a>bme680_get_profile_dur</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bme680_get_profile_dur &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_trigger_measurement
</UL>

<P><STRONG><a name="[6d]"></a>bme680_get_sensor_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bme680_get_sensor_data &rArr; read_field_data &rArr; calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
</UL>

<P><STRONG><a name="[8e]"></a>I2C_SetBusClockFreq</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2C_SetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>

<P><STRONG><a name="[55]"></a>I2C_Open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = I2C_Open &rArr; I2C_SetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[131]"></a>I2C_Close</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>I2C_Trigger</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>I2C_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>I2C_EnableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[59]"></a>I2C_GetBusClockFreq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_GetBusClockFreq &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>

<P><STRONG><a name="[134]"></a>I2C_GetIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>I2C_ClearIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>I2C_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>I2C_GetData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>I2C_SetData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>I2C_SetSlaveAddr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[139]"></a>I2C_SetSlaveAddrMask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>I2C_EnableTimeout</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>I2C_DisableTimeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>I2C_EnableWakeup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>I2C_DisableWakeup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_UART_GetUartClk</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _UART_GetUartClk &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[13e]"></a>UART_ClearIntFlag</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>UART_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>UART_Open</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Open &rArr; _UART_GetUartClk &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UART_GetUartClk
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>UART_Read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>UART_SetLine_Config</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UART_GetUartClk
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[145]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>UART_SelectIrDAMode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UART_GetUartClk
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[146]"></a>UART_SelectRS485Mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>UART_SelectLINMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>UART_Write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>CLK_DisableCKO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>CLK_EnableCKO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>CLK_PowerDown</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>CLK_Idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[8f]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetBusClockFreq
</UL>

<P><STRONG><a name="[90]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetBusClockFreq
</UL>

<P><STRONG><a name="[95]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[96]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[43]"></a>CLK_SetHCLK</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[45]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[97]"></a>CLK_EnablePLL</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[46]"></a>CLK_SetCoreClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[14f]"></a>CLK_SetPCLK0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>CLK_SetPCLK1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>CLK_SetModuleClock</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[44]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[151]"></a>CLK_DisableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[152]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>CLK_DisablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>CLK_SysTickDelay</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>CLK_EnableSysTick</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[155]"></a>CLK_DisableSysTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[23]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[33]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[34]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[35]"></a>GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[36]"></a>kbhit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[37]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[38]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[39]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[3a]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[98]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[4a]"></a>TIMER_Open</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; SysGet_HCLKFreq &rArr; SysGet_PLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>TIMER_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>TIMER_Delay</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[157]"></a>TIMER_EnableCapture</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>TIMER_DisableCapture</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>TIMER_EnableEventCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>TIMER_DisableEventCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>TIMER_ResetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>TIMER_EnableFreqCounter</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>TIMER_DisableFreqCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>TIMER_SetTriggerSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>TIMER_SetTriggerTarget</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>FMC_Erase</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_State_to_Flash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SKey_Setup
</UL>

<P><STRONG><a name="[161]"></a>FMC_GetBootSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>FMC_Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_State_from_Flash
</UL>

<P><STRONG><a name="[163]"></a>FMC_ReadCID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>FMC_ReadPID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>FMC_ReadUCID</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>FMC_ReadUID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>FMC_GetVectorPageAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>FMC_Write</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_State_to_Flash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SKey_Setup
</UL>

<P><STRONG><a name="[5f]"></a>FMC_ReadConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_flash_base
</UL>

<P><STRONG><a name="[60]"></a>FMC_WriteConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_flash_base
</UL>

<P><STRONG><a name="[16a]"></a>FMC_GetChkSum</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>FMC_CheckAllOne</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9c]"></a>FMC_SKey_Setup</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9d]"></a>FMC_SKey_Compare</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UART_GetUartClk
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBusClockFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_profile_dur
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_profile_dur
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetBusClockFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_HCLKFreq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGet_PLLClockFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint8_t
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isChannelReady
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_recalculateDownsampling
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_heater_res
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_div_nzp_s64
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_stamp_us
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[16d]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_normalizeFilterBw
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_rdivide
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>

<P><STRONG><a name="[bf]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_normalizeFilterBw
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[173]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_read_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_updateInterfaceDependency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_ready
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_rdivide
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[175]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[176]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[177]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a5]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[b4]"></a>_fsqrt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[b5]"></a>_frnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[ac]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[ab]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[129]"></a>__ARM_fcmp4</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fcmp4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>

<P><STRONG><a name="[179]"></a>_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fcmp4.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_flash_base
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTx
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRx
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTRx
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_State_to_Flash
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_ready
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_State_from_Flash
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SKey_Compare
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SKey_Setup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_CheckAllOne
</UL>

<P><STRONG><a name="[17d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[17e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b6]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[89]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bme680.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
</UL>

<P><STRONG><a name="[9a]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timer.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[53]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, Bsec.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HandleSlaveReadCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
</UL>

<P><STRONG><a name="[128]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[bd]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[be]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c0]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[c1]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[c2]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c3]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c4]"></a>__mathlib_rredf2</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[180]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[181]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[127]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c9]"></a>bsec_Bsec_applyUpdateSubscription</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, Bsec.o(i.bsec_Bsec_applyUpdateSubscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateOutputSamplIntvl
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetSamplIntvls
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_recalculateDownsampling
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[ce]"></a>bsec_Bsec_checkIfSensorRequired</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_checkIfSensorRequired))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsec_Bsec_checkIfSensorRequired &rArr; rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[d0]"></a>bsec_Bsec_checkSamplIntvlCompatibilty</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, Bsec.o(i.bsec_Bsec_checkSamplIntvlCompatibilty))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_Bsec_checkSamplIntvlCompatibilty &rArr; bsec_rdivide &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[d2]"></a>bsec_Bsec_getModHeatingDuration</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_getModHeatingDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsec_Bsec_getModHeatingDuration &rArr; powf &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[d7]"></a>bsec_Bsec_requestOutput</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, Bsec.o(i.bsec_Bsec_requestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_Bsec_requestOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[d5]"></a>bsec_Bsec_setHyperConfiguration</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_setHyperConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[122]"></a>bsec_Bsec_setHyperState</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, Bsec.o(i.bsec_Bsec_setHyperState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_Bsec_setHyperState
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[d8]"></a>bsec_ChannelHub_ChannelHub</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_ChannelHub))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_ChannelHub_ChannelHub &rArr; bsec_Channel_reset &rArr; bsec_SensorHeatCompensator_configure &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothingBsec_ExpSmoothingBsec
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_SensorStatusTracker
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBufferBsec_RingBufferBsec
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_configure
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Channel_reset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetInputOutputData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetSamplIntvls
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[e2]"></a>bsec_ChannelHub_do</STRONG> (Thumb, 886 bytes, Stack size 128 bytes, ChannelHub.o(i.bsec_ChannelHub_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_div_nzp_s64
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isChannelReady
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[11b]"></a>bsec_ChannelHub_getOutput</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_getOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_ChannelHub_getOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[11a]"></a>bsec_ChannelHub_isOutputValid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ChannelHub.o(i.bsec_ChannelHub_isOutputValid))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[cc]"></a>bsec_ChannelHub_recalculateDownsampling</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_recalculateDownsampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_ChannelHub_recalculateDownsampling &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[ca]"></a>bsec_ChannelHub_resetSamplIntvls</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, ChannelHub.o(i.bsec_ChannelHub_resetSamplIntvls))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_ChannelHub_resetSamplIntvls
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[119]"></a>bsec_ChannelHub_setInput</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_setInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_setInput
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[cd]"></a>bsec_ChannelHub_updateChannelInterfaceDependency</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_ChannelHub_updateChannelInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_updateInterfaceDependency
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[cb]"></a>bsec_ChannelHub_updateOutputSamplIntvl</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_updateOutputSamplIntvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_updateOutputSamplIntvl
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[df]"></a>bsec_Channel_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Channel.o(i.bsec_Channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsec_Channel_reset &rArr; bsec_SensorHeatCompensator_configure &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_reset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[109]"></a>bsec_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ExpSmoothingBsec.o(i.bsec_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
</UL>

<P><STRONG><a name="[f6]"></a>bsec_ExpSmoothing_setCoeffFromBandwidth</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, ExpSmoothing.o(i.bsec_ExpSmoothing_setCoeffFromBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sqrt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_updateInterfaceDependency
</UL>

<P><STRONG><a name="[f4]"></a>bsec_ExpSmoothing_setState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ExpSmoothing.o(i.bsec_ExpSmoothing_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_ExpSmoothing_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Channel_reset
</UL>

<P><STRONG><a name="[dc]"></a>bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[e7]"></a>bsec_GasHumidityBaselineTracker_doStep</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_filterRobustMaxMin &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[f9]"></a>bsec_GasHumidityBaselineTracker_setState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_setState))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
</UL>

<P><STRONG><a name="[ee]"></a>bsec_GasHumidityBaselineTracker_updateInterfaceDependency</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_GasHumidityBaselineTracker_updateInterfaceDependency &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[d9]"></a>bsec_GasHumidityPreProcessor_GasHumidityPreProcessor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_GasHumidityPreProcessor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_GasHumidityPreProcessor_GasHumidityPreProcessor &rArr; bsec_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[e6]"></a>bsec_GasHumidityPreProcessor_doStep</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsec_GasHumidityPreProcessor_doStep &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[ed]"></a>bsec_GasHumidityPreProcessor_updateInterfaceDependency</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[e0]"></a>bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[ec]"></a>bsec_HumidityTemperatureCorrector_doStep</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bsec_HumidityTemperatureCorrector_doStep &rArr; bsec_convertHumidity &rArr; logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[f2]"></a>bsec_HumidityTemperatureCorrector_updateInterfaceDependency</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsec_HumidityTemperatureCorrector_updateInterfaceDependency &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[db]"></a>bsec_IaqEstimator_configure</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, IaqEstimator.o(i.bsec_IaqEstimator_configure))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[e9]"></a>bsec_IaqEstimator_doStep</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, IaqEstimator.o(i.bsec_IaqEstimator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bsec_IaqEstimator_doStep &rArr; powf &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[f0]"></a>bsec_IaqEstimator_updateInterfaceDependency</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, IaqEstimator.o(i.bsec_IaqEstimator_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bsec_IaqEstimator_updateInterfaceDependency &rArr; bsec_IaqEstimator_getGains &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[de]"></a>bsec_RingBufferBsec_RingBufferBsec</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, RingBufferBsec.o(i.bsec_RingBufferBsec_RingBufferBsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_RingBufferBsec_RingBufferBsec
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[110]"></a>bsec_RingBuffer_do</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, RingBuffer.o(i.bsec_RingBuffer_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_RingBuffer_do &rArr; rem_uint8_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint8_t
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[112]"></a>bsec_RingBuffer_getAt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, RingBuffer.o(i.bsec_RingBuffer_getAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_RingBuffer_getAt &rArr; rem_uint8_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint8_t
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[f5]"></a>bsec_RingBuffer_reset</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, RingBuffer.o(i.bsec_RingBuffer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_RingBuffer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_setLength
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Channel_reset
</UL>

<P><STRONG><a name="[113]"></a>bsec_RingBuffer_setLength</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, RingBuffer.o(i.bsec_RingBuffer_setLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_RingBuffer_setLength &rArr; bsec_RingBuffer_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
</UL>

<P><STRONG><a name="[f3]"></a>bsec_SensorHeatCompensator_configure</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_SensorHeatCompensator_configure &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_setLength
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Channel_reset
</UL>

<P><STRONG><a name="[eb]"></a>bsec_SensorHeatCompensator_doStep</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_getAt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_do
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_updateInterfaceDependency
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[f1]"></a>bsec_SensorHeatCompensator_updateInterfaceDependency</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_normalizeFilterBw
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[da]"></a>bsec_SensorStatusTracker_SensorStatusTracker</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_SensorStatusTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_SensorStatusTracker_SensorStatusTracker
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[e4]"></a>bsec_SensorStatusTracker_doStep</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_SensorStatusTracker_doStep &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_resetRunInState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[ef]"></a>bsec_SensorStatusTracker_updateInterfaceDependency</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_SensorStatusTracker_updateInterfaceDependency &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_resetRunInState
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[dd]"></a>bsec_b_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ExpSmoothingBsec.o(i.bsec_b_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_b_ExpSmoothingBsec_ExpSmoothingBsec
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[10a]"></a>bsec_b_ExpSmoothing_setCoeffFromBandwidth</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ExpSmoothing.o(i.bsec_b_ExpSmoothing_setCoeffFromBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sqrt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
</UL>

<P><STRONG><a name="[fc]"></a>bsec_b_rdivide</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rdivide.o(i.bsec_b_rdivide))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_b_rdivide &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
</UL>

<P><STRONG><a name="[116]"></a>bsec_b_sin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sin.o(i.bsec_b_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
</UL>

<P><STRONG><a name="[117]"></a>bsec_b_sqrt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sqrt.o(i.bsec_b_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsec_b_sqrt &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothing_setCoeffFromBandwidth
</UL>

<P><STRONG><a name="[10b]"></a>bsec_c_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ExpSmoothingBsec.o(i.bsec_c_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
</UL>

<P><STRONG><a name="[118]"></a>bsec_codegen_do_steps</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, bsec_codegen_do_steps.o(i.bsec_codegen_do_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setInput
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isOutputValid
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getOutput
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_do_steps
</UL>

<P><STRONG><a name="[124]"></a>bsec_codegen_get_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsec_codegen_get_version.o(i.bsec_codegen_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_version
</UL>

<P><STRONG><a name="[11c]"></a>bsec_codegen_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsec_codegen_init.o(i.bsec_codegen_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = bsec_codegen_init &rArr; bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_init
</UL>

<P><STRONG><a name="[11e]"></a>bsec_codegen_sensor_control</STRONG> (Thumb, 774 bytes, Stack size 72 bytes, bsec_codegen_sensor_control.o(i.bsec_codegen_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = bsec_codegen_sensor_control &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkIfSensorRequired
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setInput
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sensor_control
</UL>

<P><STRONG><a name="[120]"></a>bsec_codegen_update_subscription</STRONG> (Thumb, 740 bytes, Stack size 96 bytes, bsec_codegen_update_subscription.o(i.bsec_codegen_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_update_subscription
</UL>

<P><STRONG><a name="[11d]"></a>bsec_constructor_bsec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, constructor_bsec.o(i.bsec_constructor_bsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_init
</UL>

<P><STRONG><a name="[10c]"></a>bsec_convertHumidity</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, convertHumidity.o(i.bsec_convertHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_convertHumidity &rArr; logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_rdivide
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
</UL>

<P><STRONG><a name="[72]"></a>bsec_do_steps</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsec_interface.o(i.bsec_do_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_process_data
</UL>

<P><STRONG><a name="[66]"></a>bsec_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsec_interface.o(i.bsec_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_get_version
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[65]"></a>bsec_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsec_interface.o(i.bsec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = bsec_init &rArr; bsec_codegen_init &rArr; bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[114]"></a>bsec_normalizeFilterBw</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, normalizeFilterBw.o(i.bsec_normalizeFilterBw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_normalizeFilterBw &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_updateInterfaceDependency
</UL>

<P><STRONG><a name="[d1]"></a>bsec_rdivide</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rdivide.o(i.bsec_rdivide))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_rdivide &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_updateInterfaceDependency
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[76]"></a>bsec_sensor_control</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, bsec_interface.o(i.bsec_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = bsec_sensor_control &rArr; bsec_codegen_sensor_control &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_b_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_b_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[f7]"></a>bsec_sin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sin.o(i.bsec_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
</UL>

<P><STRONG><a name="[f8]"></a>bsec_sqrt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sqrt.o(i.bsec_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsec_sqrt &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
</UL>

<P><STRONG><a name="[63]"></a>bsec_update_subscription</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsec_interface.o(i.bsec_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bsec_update_subscription &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_bsec_update_subscription
</UL>

<P><STRONG><a name="[126]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[182]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, expf.o(i.expf), UNUSED)

<P><STRONG><a name="[fb]"></a>expf</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = expf &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
</UL>

<P><STRONG><a name="[125]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[108]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[10e]"></a>fmaxf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fmaxf.o(i.fmaxf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmaxf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
</UL>

<P><STRONG><a name="[105]"></a>fminf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fminf.o(i.fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fminf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_normalizeFilterBw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
</UL>

<P><STRONG><a name="[fd]"></a>log10f</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, log10f.o(i.log10f))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getGains
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_compensateHumidityEffect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[183]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, logf.o(i.logf), UNUSED)

<P><STRONG><a name="[123]"></a>logf</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, powf.o(i.powf), UNUSED)

<P><STRONG><a name="[d3]"></a>powf</STRONG> (Thumb, 1538 bytes, Stack size 64 bytes, powf.o(i.powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = powf &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
</UL>

<P><STRONG><a name="[d4]"></a>roundf</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = roundf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getModHeatingDuration
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[10d]"></a>sinf</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sin
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
</UL>

<P><STRONG><a name="[107]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sqrt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_sqrt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nano103.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nano103.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nano_support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[62]"></a>bme680_bsec_update_subscription</STRONG> (Thumb, 84 bytes, Stack size 136 bytes, bsec_integration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bme680_bsec_update_subscription &rArr; bsec_update_subscription &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[67]"></a>bme680_bsec_trigger_measurement</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bsec_integration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bme680_bsec_trigger_measurement &rArr; bme680_set_sensor_settings &rArr; set_gas_config &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_mode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_profile_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[6c]"></a>bme680_bsec_read_data</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, bsec_integration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bme680_bsec_read_data &rArr; bme680_get_sensor_data &rArr; read_field_data &rArr; calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[71]"></a>bme680_bsec_process_data</STRONG> (Thumb, 510 bytes, Stack size 328 bytes, bsec_integration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = bme680_bsec_process_data &rArr; bsec_do_steps &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_SensorHeatCompensator_doStep &rArr; bsec_SensorHeatCompensator_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; bsec_sin &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_do_steps
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[79]"></a>null_ptr_check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bme680.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_settings
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gas_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mem_page
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_mode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_data
</UL>

<P><STRONG><a name="[78]"></a>set_mem_page</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gas_config
</UL>

<P><STRONG><a name="[7b]"></a>get_calib_data</STRONG> (Thumb, 446 bytes, Stack size 88 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_calib_data &rArr; bme680_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_init
</UL>

<P><STRONG><a name="[7d]"></a>get_mem_page</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_soft_reset
</UL>

<P><STRONG><a name="[84]"></a>boundary_check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = boundary_check
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
</UL>

<P><STRONG><a name="[83]"></a>calc_heater_dur</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_heater_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
</UL>

<P><STRONG><a name="[80]"></a>calc_heater_res</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = calc_heater_res &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gas_config
</UL>

<P><STRONG><a name="[82]"></a>set_gas_config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_gas_config &rArr; bme680_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_regs
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_heater_res
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_heater_dur
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_set_sensor_settings
</UL>

<P><STRONG><a name="[85]"></a>get_gas_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bme680.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_settings
</UL>

<P><STRONG><a name="[88]"></a>calc_gas_resistance</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[8a]"></a>calc_humidity</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = calc_humidity &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[8b]"></a>calc_pressure</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calc_pressure &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[8c]"></a>calc_temperature</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = calc_temperature &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
</UL>

<P><STRONG><a name="[8d]"></a>read_field_data</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, bme680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = read_field_data &rArr; calc_gas_resistance &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_regs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme680_get_sensor_data
</UL>

<P><STRONG><a name="[11f]"></a>rem_uint16_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsec_codegen_sensor_control.o(i.rem_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[121]"></a>bsec_rt_roundd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsec_codegen_update_subscription.o(i.bsec_rt_roundd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[d6]"></a>bsec_convert_to_enum_OutputIdentifier</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, Bsec.o(i.bsec_convert_to_enum_OutputIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_convert_to_enum_OutputIdentifier &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[cf]"></a>rem_uint16_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Bsec.o(i.rem_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibilty
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkIfSensorRequired
</UL>

<P><STRONG><a name="[e3]"></a>bsec_ChannelHub_isChannelReady</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_isChannelReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_ChannelHub_isChannelReady &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[e1]"></a>bsec_ChannelHub_resetInputOutputData</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_resetInputOutputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_resetInputOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[e5]"></a>bsec_ChannelHub_setOutput</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ChannelHub.o(i.bsec_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsec_ChannelHub_setOutput &rArr; roundf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[e8]"></a>bsec_b_ChannelHub_setOutput</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_b_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsec_b_ChannelHub_setOutput &rArr; roundf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[ea]"></a>bsec_div_nzp_s64</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_div_nzp_s64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_div_nzp_s64 &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[fa]"></a>bsec_GasHumidityBaselineTracker_compensateHumidityEffect</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_compensateHumidityEffect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_GasHumidityBaselineTracker_compensateHumidityEffect &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_rdivide
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[fe]"></a>bsec_GasHumidityBaselineTracker_determineAccuracyLevel</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_determineAccuracyLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsec_GasHumidityBaselineTracker_determineAccuracyLevel &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[102]"></a>bsec_GasHumidityBaselineTracker_filterRobustMaxMin</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_filterRobustMaxMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsec_GasHumidityBaselineTracker_filterRobustMaxMin &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[103]"></a>bsec_GasHumidityBaselineTracker_getMinimumFilterDistance</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getMinimumFilterDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bsec_GasHumidityBaselineTracker_getMinimumFilterDistance &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[100]"></a>bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt &rArr; expf &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[10f]"></a>bsec_IaqEstimator_getGains</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_IaqEstimator_getGains))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_IaqEstimator_getGains &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rdivide
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
</UL>

<P><STRONG><a name="[115]"></a>bsec_SensorStatusTracker_resetRunInState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_resetRunInState))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
</UL>

<P><STRONG><a name="[111]"></a>rem_uint8_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, RingBuffer.o(i.rem_uint8_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rem_uint8_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_getAt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_RingBuffer_do
</UL>

<P><STRONG><a name="[c5]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bc]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[c8]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
