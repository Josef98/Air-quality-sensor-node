#line 1 "..\\main.c"
 









 
 
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"
 
 
 





 






 







 




  
 








#line 47 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"


  



    typedef unsigned int size_t;    









 
 

 



    typedef struct __va_list __va_list;






   




 




typedef struct __fpos_t_struct {
    unsigned __int64 __pos;
    



 
    struct {
        unsigned int __state1, __state2;
    } __mbstate;
} fpos_t;
   


 


   

 

typedef struct __FILE FILE;
   






 

#line 136 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"


extern FILE __stdin, __stdout, __stderr;
extern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;

#line 166 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"
    

    

    





     



   


 


   


 

   



 

   


 




   


 





    


 






extern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   








 
extern __declspec(__nothrow) FILE *tmpfile(void);
   




 
extern __declspec(__nothrow) char *tmpnam(char *  );
   











 

extern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
   







 
extern __declspec(__nothrow) int fflush(FILE *  );
   







 
extern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
                           const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   








































 
extern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
                    const char * __restrict  ,
                    FILE * __restrict  ) __attribute__((__nonnull__(2,3)));
   








 
extern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
                    char * __restrict  ) __attribute__((__nonnull__(1)));
   




 
extern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
                   char * __restrict  ,
                   int  , size_t  ) __attribute__((__nonnull__(1)));
   















 
#pragma __printf_args
extern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   


















 
#pragma __printf_args
extern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 
#pragma __printf_args
extern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   




 
#pragma __printf_args
extern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   



 
#pragma __printf_args
extern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   






 
#pragma __printf_args
extern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 

#pragma __printf_args
extern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(3)));


#pragma __printf_args
extern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(3)));
   















 

#pragma __printf_args
extern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
                      const char * __restrict  , ...) __attribute__((__nonnull__(3)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   






























 
#pragma __scanf_args
extern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   






 
#pragma __scanf_args
extern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int sscanf(const char * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   








 
#pragma __scanf_args
extern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 

 
extern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));

extern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));

extern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
                    const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int vsprintf(char * __restrict  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));

extern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));
   







 

extern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
                      const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   



 
extern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   



 
extern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
                      const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));
   



 

#pragma __printf_args
extern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));

#pragma __printf_args
extern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
   








 

extern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
   







 
extern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
                    FILE * __restrict  ) __attribute__((__nonnull__(1,3)));
   










 
extern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   







 
extern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
   







 




    extern __declspec(__nothrow) int (getchar)(void);

   





 
extern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
   









 
extern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   





 




    extern __declspec(__nothrow) int (putchar)(int  );

   



 
extern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   






















 

extern __declspec(__nothrow) size_t fread(void * __restrict  ,
                    size_t  , size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,4)));
   











 

extern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
                    size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,3)));
   











 

extern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
                    size_t  , size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,4)));
   







 

extern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
   








 
extern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
   














 
extern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
   










 
extern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
   











 
extern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
   





 

extern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
   




 

extern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
   


 
extern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
   


 
extern __declspec(__nothrow) void perror(const char *  );
   









 

extern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
    
 

extern __declspec(__nothrow) void __use_no_semihosting_swi(void);
extern __declspec(__nothrow) void __use_no_semihosting(void);
    





 











#line 1021 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"



 

#line 14 "..\\main.c"
#line 1 ".\\bst_exp\\bsec_integration.h"


























































 






 




 









 
 
 

 
#line 1 ".\\bst_driver\\bme680.h"














































 

 


 



 





 
#line 1 ".\\bst_driver\\bme680_defs.h"














































 


 



 



 
 
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 65 ".\\bst_driver\\bme680_defs.h"
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"
 






 

 
 
 





 





#line 34 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"




  typedef signed int ptrdiff_t;



  



    typedef unsigned int size_t;    
#line 57 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



   



      typedef unsigned short wchar_t;  
#line 82 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



    




   




  typedef long double max_align_t;









#line 114 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



 

#line 66 ".\\bst_driver\\bme680_defs.h"


 
 
 





















 

 
#line 102 ".\\bst_driver\\bme680_defs.h"

 


 



 


 




 



 


 

 





 



 



 
 






 


 



 
#line 163 ".\\bst_driver\\bme680_defs.h"

 



 


 


 



 



 
#line 189 ".\\bst_driver\\bme680_defs.h"

 
#line 199 ".\\bst_driver\\bme680_defs.h"

 



 


 



 


 



 






 
#line 235 ".\\bst_driver\\bme680_defs.h"

 



 
#line 261 ".\\bst_driver\\bme680_defs.h"

 






 
#line 304 ".\\bst_driver\\bme680_defs.h"

 
#line 313 ".\\bst_driver\\bme680_defs.h"

 


 






 





 









 
typedef int8_t (*bme680_com_fptr_t)(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len);




 
typedef void (*bme680_delay_fptr_t)(uint32_t period);



 
enum bme680_intf {
	 
	BME680_SPI_INTF,
	 
	BME680_I2C_INTF
};

 


 
struct	bme680_field_data {
	 
	uint8_t status;
	 
	uint8_t gas_index;
	 
	uint8_t meas_index;
	 
	int16_t temperature;
	 
	uint32_t pressure;
	 
	uint32_t humidity;
	 
	uint32_t gas_resistance;
};



 
struct	bme680_calib_data {
	 
	uint16_t par_h1;
	 
	uint16_t par_h2;
	 
	int8_t par_h3;
	 
	int8_t par_h4;
	 
	int8_t par_h5;
	 
	uint8_t par_h6;
	 
	int8_t par_h7;
	 
	int8_t par_gh1;
	 
	int16_t par_gh2;
	 
	int8_t par_gh3;
	 
	uint16_t par_t1;
	 
	int16_t par_t2;
	 
	int8_t par_t3;
	 
	uint16_t par_p1;
	 
	int16_t par_p2;
	 
	int8_t par_p3;
	 
	int16_t par_p4;
	 
	int16_t par_p5;
	 
	int8_t par_p6;
	 
	int8_t par_p7;
	 
	int16_t par_p8;
	 
	int16_t par_p9;
	 
	uint8_t par_p10;
	 
	int32_t t_fine;
	 
	uint8_t res_heat_range;
	 
	int8_t res_heat_val;
	 
	int8_t range_sw_err;
};




 
struct	bme680_tph_sett {
	 
	uint8_t os_hum;
	 
	uint8_t os_temp;
	 
	uint8_t os_pres;
	 
	uint8_t filter;
};




 
struct	bme680_gas_sett {
	 
	uint8_t nb_conv;
	 
	uint8_t heatr_ctrl;
	 
	uint8_t run_gas;
	 
	uint16_t heatr_temp;
	 
	uint16_t heatr_dur;
};



 
struct	bme680_dev {
	 
	uint8_t chip_id;
	 
	uint8_t dev_id;
	 
	enum bme680_intf intf;
	 
	uint8_t mem_page;
	 
	int8_t amb_temp;
	 
	struct bme680_calib_data calib;
	 
	struct bme680_tph_sett tph_sett;
	 
	struct bme680_gas_sett gas_sett;
	 
	uint8_t power_mode;
	 
	uint8_t new_fields;
	 
	uint8_t info_msg;
	 
	bme680_com_fptr_t read;
	 
	bme680_com_fptr_t write;
	 
	bme680_delay_fptr_t delay_ms;
	 
	int8_t com_rslt;
};




 
 
#line 64 ".\\bst_driver\\bme680.h"

 








 
int8_t bme680_init(struct bme680_dev *dev);













 
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev);











 
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev);








 
int8_t bme680_soft_reset(struct bme680_dev *dev);














 
int8_t bme680_set_sensor_mode(struct bme680_dev *dev);














 
int8_t bme680_get_sensor_mode(struct bme680_dev *dev);








 
void bme680_set_profile_dur(uint16_t duration, struct bme680_dev *dev);








 
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev);











 
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev);



























 
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev);











 
int8_t bme680_get_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev);




 
#line 87 ".\\bst_exp\\bsec_integration.h"
#line 1 ".\\bst_driver\\bma2x2.h"





















































 


 


 
 
 






 




 
#line 92 ".\\bst_driver\\bma2x2.h"



 
#line 222 ".\\bst_driver\\bma2x2.h"




 



 
#line 259 ".\\bst_driver\\bma2x2.h"
 
typedef	signed char  s8; 
typedef	signed short int s16; 
typedef	signed int s32; 
typedef	signed long long int s64; 

 
typedef	unsigned char u8; 
typedef	unsigned short int u16; 
typedef	unsigned int u32; 
typedef	unsigned long long int u64; 


 
#line 292 ".\\bst_driver\\bma2x2.h"

 
 
 

















 























 





















 


 


























 








 
 
 










 







 



 
 
 



	 





	 




	 
#line 450 ".\\bst_driver\\bma2x2.h"

 
 
 





 
 
 

 

 
 
 




 
#line 480 ".\\bst_driver\\bma2x2.h"
 





 
#line 493 ".\\bst_driver\\bma2x2.h"
 
#line 503 ".\\bst_driver\\bma2x2.h"
 
#line 521 ".\\bst_driver\\bma2x2.h"
 





 


 




 
 
 




 
 
 
 



 
 
 


 
struct bma2x2_accel_data {
s16 x, 
y, 
z; 
};



 
struct bma2x2_accel_data_temp {
s16 x, 
y, 
z; 
s8 temp; 
};



 
struct  bma2x2_accel_eight_resolution {
s8 x, 
y, 
z; 
};


 
struct bma2x2_accel_eight_resolution_temp {
s8 x, 
y, 
z; 
s8 temp; 
};











 
struct bma2x2_t {
u8 power_mode_u8; 
u8 chip_id; 
u8 ctrl_mode_reg; 
u8 low_mode_reg; 
u8 dev_addr; 
u8 fifo_config; 
s8(*bus_write)(u8, u8, u8 *, u8); 
s8(*bus_read)(u8, u8, u8 *, u8); 
s8(*burst_read)(u8, u8, u8 *, u32); 
void (*delay_msec)(u32);

 
};

 
 
 
 
 
 





 
 
 





























 
 
 





























 
 
 






























 
 
 





 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 



















 
 
 



















 
 
 



















 
 
 




 
 
 





 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 

 
 
 














 
 
 




 
 
 




 
 
 




 
 
 




 
 
 














 
 
 




 
 
 




 
 
 




 
 
 




 
 
 

















 
 
 





 
 
 




 
 
 




 
 
 




 
 
 





 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 





 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 





 
 
 




 
 
 




 
 
 



















 
 
 




 
 
 




 
 
 




 
 
 





 
 
 




 
 
 




 
 
 





 
 
 





 
 
 





 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 





 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 




 
 
 









 
 
 




 
 
 




 
 
 




 
 
 




 
 
 














 
 
 




 
 
 




 
 
 




 
 
 




 
 
 














 
 
 




 
 
 





 
 
 







 
 
 
 
 
 
 

 

 

 

 

 
 
 

 

 

 
 
 

 

 

 
 
 

 

 

 
 
 

 

 

 

 

 

 
 
 

 

 

 

 



  

 

 

  

  

 

 

  

 
 
 

 

 

 

 

 

 

 

 

 

 

 

 
 
 

 

 

 

  

  

  

  

  

  

  

  

  

 

 

  

 

 
 
 
#line 1776 ".\\bst_driver\\bma2x2.h"

 
 
 

 

 

 

 
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 
 
#line 1876 ".\\bst_driver\\bma2x2.h"






 
 
 





 
 
 














 
 
 



 
 
 




 
 
 


 
 
 




 
 
 






 
 






 
 
 




 
 
 




 
 
 


 
 
 
#line 1979 ".\\bst_driver\\bma2x2.h"
 
 
 


 
 
 


 
 
 



 
 
 




#line 2009 ".\\bst_driver\\bma2x2.h"





#line 2021 ".\\bst_driver\\bma2x2.h"






 







 







 







 








 


 
 
 
 
 
 
















 
s8 bma2x2_burst_read(u8 addr_u8,
u8 *data_u8, u32 len_u32);
 
 
 






















 
s8 bma2x2_init(struct bma2x2_t *bma2x2);

















 
s8 bma2x2_write_reg(u8 adr_u8,
u8 *data_u8, u8 len_u8);
















 
s8 bma2x2_read_reg(u8 adr_u8,
u8 *data_u8, u8 len_u8);
 
 
 



















 
s8 bma2x2_read_accel_x(s16 *accel_x_s16);















 
s8 bma2x2_read_accel_eight_resolution_x(
s8 *accel_x_s8);


















 
s8 bma2x2_read_accel_y(s16 *accel_y_s16);
















 
s8 bma2x2_read_accel_eight_resolution_y(
s8 *accel_y_s8);


















 
s8 bma2x2_read_accel_z(s16 *accel_z_s16);
















 
s8 bma2x2_read_accel_eight_resolution_z(
s8 *accel_z_s8);
















 
s8 bma2x2_read_accel_xyz(
struct bma2x2_accel_data *accel);

















 
s8 bma2x2_read_accel_eight_resolution_xyz(
struct bma2x2_accel_eight_resolution *accel);
 
 
 














 
s8 bma2x2_get_intr_tap_stat(
u8 *stat_tap_u8);














 
s8 bma2x2_get_intr_orient_stat(
u8 *stat_orient_u8);













 
s8 bma2x2_get_fifo_stat(
u8 *stat_fifo_u8);














 
s8 bma2x2_get_fifo_frame_count(
u8 *frame_count_u8);














 
s8 bma2x2_get_fifo_overrun(
u8 *fifo_overrun_u8);
 
 
 















 
s8 bma2x2_get_intr_stat(
u8 *intr_stat_u8);




















 
s8 bma2x2_get_range(u8 *range_u8);




















 
s8 bma2x2_set_range(u8 range_u8);
 
 
 
























 
s8 bma2x2_get_bw(u8 *bw_u8);
























 
s8 bma2x2_set_bw(u8 bw_u8);
 
 
 
























 
s8 bma2x2_get_power_mode(
u8 *power_mode_u8);
























 
s8 bma2x2_set_power_mode(u8 power_mode_u8);
























 
s8 bma2x2_set_mode_value(u8 power_mode_u8);
 
 
 






























 
s8 bma2x2_get_sleep_durn(u8 *sleep_durn_u8);






























 
s8 bma2x2_set_sleep_durn(u8 sleep_durn_u8);



















 
s8 bma2x2_get_sleep_timer_mode(
u8 *sleep_timer_u8);



















 
s8 bma2x2_set_sleep_timer_mode(u8 sleep_timer_u8);
 
 
 
















 
s8 bma2x2_get_high_bw(u8 *high_bw_u8);
















 
s8 bma2x2_set_high_bw(u8 high_bw_u8);

















 
s8 bma2x2_get_shadow_dis(u8 *shadow_dis_u8);

















 
s8 bma2x2_set_shadow_dis(u8 shadow_dis_u8);
 
 
 












 
s8 bma2x2_soft_rst(void);















 
s8 bma2x2_update_image(void);
 
 
 











































 
s8 bma2x2_get_intr_enable(u8 intr_type_u8,
u8 *value_u8);











































 
s8 bma2x2_set_intr_enable(u8 intr_type_u8,
u8 value_u8);



















 
s8 bma2x2_get_intr_fifo_full(u8 *fifo_full_u8);



















 
s8 bma2x2_set_intr_fifo_full(u8 fifo_full_u8);





















 
s8 bma2x2_get_intr_fifo_wm(u8 *fifo_wm_u8);





















 
s8 bma2x2_set_intr_fifo_wm(u8 fifo_wm_u8);



























 
s8 bma2x2_get_slow_no_motion(u8 channel_u8,
u8 *slow_no_motion_u8);


























 
s8 bma2x2_set_slow_no_motion(u8 channel_u8,
u8 slow_no_motion_u8);




























 
s8 bma2x2_get_intr_low_g(u8 channel_u8,
u8 *intr_low_g_u8);




























 
s8 bma2x2_set_intr_low_g(u8 channel_u8,
u8 intr_low_u8);

























 
s8 bma2x2_get_intr_high_g(u8 channel_u8,
u8 *intr_high_g_u8);

























 
s8 bma2x2_set_intr_high_g(u8 channel_u8,
u8 intr_high_g_u8);



























 
s8 bma2x2_get_intr_slope(u8 channel_u8,
u8 *intr_slope_u8);



























 
s8 bma2x2_set_intr_slope(u8 channel_u8,
u8 intr_slope_u8);




























 
s8 bma2x2_get_intr_slow_no_motion(u8 channel_u8,
u8 *intr_slow_no_motion_u8);




























 
s8 bma2x2_set_intr_slow_no_motion(u8 channel_u8,
u8 intr_slow_no_motion_u8);



























 
s8 bma2x2_get_intr_double_tap(u8 channel_u8,
u8 *intr_double_tap_u8);



























 
s8 bma2x2_set_intr_double_tap(u8 channel_u8,
u8 intr_double_tap_u8);


























 
s8 bma2x2_get_intr_single_tap(u8 channel_u8,
u8 *intr_single_tap_u8);


























 
s8 bma2x2_set_intr_single_tap(u8 channel_u8,
u8 intr_single_tap_u8);

























 
s8 bma2x2_get_intr_orient(u8 channel_u8,
u8 *intr_orient_u8);

























 
s8 bma2x2_set_intr_orient(u8 channel_u8,
u8 intr_orient_u8);



























 
s8 bma2x2_get_intr_flat(u8 channel_u8,
u8 *intr_flat_u8);



























 
s8 bma2x2_set_intr_flat(u8 channel_u8,
u8 intr_flat_u8);


























 
s8 bma2x2_get_new_data(u8 channel_u8,
u8 *intr_newdata_u8);


























 
s8 bma2x2_set_new_data(u8 channel_u8,
u8 intr_newdata_u8);
 
 
 

















 
s8 bma2x2_get_intr1_fifo_wm(u8 *intr1_fifo_wm_u8);

















 
s8 bma2x2_set_intr1_fifo_wm(u8 intr1_fifo_wm_u8);

















 
s8 bma2x2_get_intr2_fifo_wm(u8 *intr2_fifo_wm_u8);

















 
s8 bma2x2_set_intr2_fifo_wm(u8 intr2_fifo_wm_u8);



















 
s8 bma2x2_get_intr1_fifo_full(
u8 *intr1_fifo_full_u8);



















 
s8 bma2x2_set_intr1_fifo_full(u8 intr1_fifo_full_u8);




















 
s8 bma2x2_get_intr2_fifo_full(
u8 *intr2_fifo_full_u8);




















 
s8 bma2x2_set_intr2_fifo_full(u8 intr2_fifo_full_u8);
 
 
 




























 
s8 bma2x2_get_source(u8 channel_u8,
u8 *intr_source_u8);




























 
s8 bma2x2_set_source(u8 channel_u8,
u8 intr_source_u8);
 
 
 

























 
s8 bma2x2_get_intr_output_type(u8 channel_u8,
u8 *intr_output_type_u8);

























 
s8 bma2x2_set_intr_output_type(u8 channel_u8,
u8 intr_output_type_u8);
























 
s8 bma2x2_get_intr_level(u8 channel_u8,
u8 *intr_level_u8);
























 
s8 bma2x2_set_intr_level(u8 channel_u8,
u8 intr_level_u8);
 
 
 


















 
s8 bma2x2_rst_intr(u8 rst_intr_u8);
 
 
 































 
s8 bma2x2_get_latch_intr(u8 *latch_intr_u8);































 
s8 bma2x2_set_latch_intr(u8 latch_intr_u8);
 
 
 






































 
s8 bma2x2_get_durn(u8 channel_u8,
u8 *durn_u8);






































 
s8 bma2x2_set_durn(u8 channel_u8,
u8 durn_u8);
 
 
 



























































 
s8 bma2x2_get_thres(u8 channel_u8,
u8 *thres_u8);



























































 
s8 bma2x2_set_thres(u8 channel_u8,
u8 thres_u8);
 
 
 































 
s8 bma2x2_get_low_high_g_hyst(u8 channel_u8,
u8 *hyst_u8);































 
s8 bma2x2_set_low_high_g_hyst(u8 channel_u8,
u8 hyst_u8);
 
 
 

















 
s8 bma2x2_get_low_g_mode(u8 *low_g_mode_u8);

















 
s8 bma2x2_set_low_g_mode(u8 low_g_mode_u8);
 
 
 
























 
s8 bma2x2_get_tap_durn(u8 *tap_durn_u8);
























 
s8 bma2x2_set_tap_durn(u8 tap_durn_u8);
 
 
 


















 
s8 bma2x2_get_tap_shock(u8 *tap_shock_u8);


















 
s8 bma2x2_set_tap_shock(u8 tap_shock_u8);
 
 
 

















 
s8 bma2x2_get_tap_quiet(u8 *tap_quiet_u8);

















 
s8 bma2x2_set_tap_quiet(u8 tap_quiet_u8);
 
 
 






















 
s8 bma2x2_get_tap_thres(u8 *tap_thres_u8);






















 
s8 bma2x2_set_tap_thres(u8 tap_thres_u8);
 
 
 




















 
s8 bma2x2_get_tap_sample(u8 *tap_sample_u8);




















 
s8 bma2x2_set_tap_sample(u8 tap_sample_u8);
 
 
 





















 
s8 bma2x2_get_orient_mode(u8 *orient_mode_u8);





















 
s8 bma2x2_set_orient_mode(u8 orient_mode_u8);
 
 
 


























 
s8 bma2x2_get_orient_block(
u8 *orient_block_u8);


























 
s8 bma2x2_set_orient_block(u8 orient_block_u8);
 
 
 















 
s8 bma2x2_get_orient_hyst(u8 *orient_hyst_u8);















 
s8 bma2x2_set_orient_hyst(u8 orient_hyst_u8);
 
 
 























 
s8 bma2x2_get_theta(u8 channel_u8,
u8 *theta_u8);























 
s8 bma2x2_set_theta(u8 channel_u8,
u8 theta_u8);
 
 
 


















 
s8 bma2x2_get_orient_enable(
u8 *orient_enable_u8);


















 
s8 bma2x2_set_orient_enable(u8 orient_enable_u8);
 
 
 

















 
s8 bma2x2_get_flat_hyst(u8 *flat_hyst_u8);

















 
s8 bma2x2_set_flat_hyst(u8 flat_hyst_u8);
 
 
 





















 
s8 bma2x2_get_flat_hold_time(
u8 *flat_hold_time_u8);





















 
s8 bma2x2_set_flat_hold_time(
u8 flat_hold_time_u8);
 
 
 
















 
s8 bma2x2_get_fifo_wml_trig(
u8 *fifo_wml_trig);
















 
s8 bma2x2_set_fifo_wml_trig(
u8 fifo_wml_trig);
 
 
 




















 
s8 bma2x2_get_selftest_axis(
u8 *selftest_axis_u8);




















 
s8 bma2x2_set_selftest_axis(
u8 selftest_axis_u8);


















 
s8 bma2x2_get_selftest_sign(
u8 *selftest_sign_u8);


















 
s8 bma2x2_set_selftest_sign(
u8 selftest_sign_u8);
 
 
 
















 
s8 bma2x2_get_nvmprog_mode(
u8 *nvmprog_mode_u8);
















 
s8 bma2x2_set_nvmprog_mode(u8 nvmprog_mode_u8);



















 
s8 bma2x2_set_nvprog_trig(u8 nvprog_trig_u8);


















 
s8 bma2x2_get_nvmprog_ready(u8 *nvprog_ready_u8);


















 
s8 bma2x2_get_nvmprog_remain(u8 *nvprog_remain_u8);
 
 
 



















 
s8 bma2x2_get_spi3(u8 *spi3_u8);



















 
s8 bma2x2_set_spi3(u8 spi3_u8);






























 
s8 bma2x2_get_i2c_wdt(u8 channel_u8,
u8 *i2c_wdt_u8);






























 
s8 bma2x2_set_i2c_wdt(u8 channel_u8,
u8 i2c_wdt_u8);
 
 
 




























 
s8 bma2x2_get_slow_comp(u8 channel_u8,
u8 *slow_comp_u8);




























 
s8 bma2x2_set_slow_comp(u8 channel_u8,
u8 slow_comp_u8);

















 
s8 bma2x2_get_cal_rdy(u8 *cal_rdy_u8);

















 
s8 bma2x2_set_cal_trigger(u8 cal_trigger_u8);
















 
s8 bma2x2_set_offset_rst(u8 offset_rst_u8);





































 
s8 bma2x2_get_offset_target(u8 channel_u8,
u8 *offset_u8);





































 
s8 bma2x2_set_offset_target(u8 channel_u8,
u8 offset_u8);
























 
s8 bma2x2_get_offset(u8 channel_u8,
s8 *offset_u8);
























 
s8 bma2x2_set_offset(u8 channel_u8,
s8 offset_u8);
 
 
 




















 
s8 bma2x2_get_fifo_mode(u8 *fifo_mode_u8);




















 
s8 bma2x2_set_fifo_mode(u8 fifo_mode_u8);




















 
s8 bma2x2_get_fifo_data_select(
u8 *fifo_data_select_u8);




















 
s8 bma2x2_set_fifo_data_select(
u8 fifo_data_select_u8);














 
s8 bma2x2_get_fifo_data_output_reg(
u8 *output_reg_u8);
 
 
 















 
s8 bma2x2_read_temp(s8 *temp_s8);
 
 
 














 
s8 bma2x2_read_accel_xyzt(
struct bma2x2_accel_data_temp *accel);














 
s8 bma2x2_read_accel_eight_resolution_xyzt(
struct bma2x2_accel_eight_resolution_temp *accel);


#line 88 ".\\bst_exp\\bsec_integration.h"
 
#line 1 ".\\bst_algo\\bsec_interface.h"


























































 
 






 





#line 1 ".\\bst_algo\\bsec_datatypes.h"


























































 

 





 











 

#line 85 ".\\bst_algo\\bsec_datatypes.h"
#line 86 ".\\bst_algo\\bsec_datatypes.h"

#line 94 ".\\bst_algo\\bsec_datatypes.h"

#line 101 ".\\bst_algo\\bsec_datatypes.h"








 
typedef enum
{
    

 
    BSEC_INPUT_PRESSURE = 1,  

    






 
    BSEC_INPUT_HUMIDITY = 2,            

    






 
    BSEC_INPUT_TEMPERATURE = 3,        

    




 
    BSEC_INPUT_GASRESISTOR = 4,          

    








 
    BSEC_INPUT_HEATSOURCE = 14,        

    



 

    
    





 
    BSEC_INPUT_DISABLE_BASELINE_TRACKER = 23     
} bsec_physical_sensor_t;








 
typedef enum
{
    









 
    BSEC_OUTPUT_IAQ_ESTIMATE = 1,                           

    





 
    BSEC_OUTPUT_RAW_TEMPERATURE = 6,                

    



 
    BSEC_OUTPUT_RAW_PRESSURE = 7,                   

    





 
    BSEC_OUTPUT_RAW_HUMIDITY = 8,     

    




 
    BSEC_OUTPUT_RAW_GAS = 9,                

    




 
    BSEC_OUTPUT_STABILIZATION_STATUS = 12,                 

    




 
    BSEC_OUTPUT_RUN_IN_STATUS = 13,                         

    















 
    BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_TEMPERATURE = 14,   

    









 
    BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_HUMIDITY = 15,     

    BSEC_OUTPUT_VOC_FEATURE = 18,         					 

} bsec_virtual_sensor_t;



 
typedef enum
{
    BSEC_OK = 0,                                     
    BSEC_E_DOSTEPS_INVALIDINPUT = -1,                
    BSEC_E_DOSTEPS_VALUELIMITS = -2,                 
    BSEC_E_DOSTEPS_DUPLICATEINPUT = -6,              
    BSEC_I_DOSTEPS_NOOUTPUTSRETURNABLE = 2,          
    BSEC_W_DOSTEPS_EXCESSOUTPUTS = 3,                
    BSEC_W_DOSTEPS_TSINTRADIFFOUTOFRANGE = 4,        
    BSEC_E_SU_WRONGDATARATE = -10,                   
    BSEC_E_SU_SAMPLERATELIMITS = -12,                
    BSEC_E_SU_DUPLICATEGATE = -13,                   
    BSEC_E_SU_INVALIDSAMPLERATE = -14,               
    BSEC_E_SU_GATECOUNTEXCEEDSARRAY = -15,           
    BSEC_E_SU_SAMPLINTVLINTEGERMULT = -16,           
    BSEC_E_SU_MULTGASSAMPLINTVL = -17,               
    BSEC_E_SU_HIGHHEATERONDURATION = -18,            
    BSEC_W_SU_UNKNOWNOUTPUTGATE = 10,                
    BSEC_W_SU_MODINNOULP = 11,                         
    BSEC_I_SU_SUBSCRIBEDOUTPUTGATES = 12,            
    BSEC_E_PARSE_SECTIONEXCEEDSWORKBUFFER = -32,     
    BSEC_E_CONFIG_FAIL = -33,                        
    BSEC_E_CONFIG_VERSIONMISMATCH = -34,             
    BSEC_E_CONFIG_FEATUREMISMATCH = -35,             
    BSEC_E_CONFIG_CRCMISMATCH = -36,                 
    BSEC_E_CONFIG_EMPTY = -37,                       
    BSEC_E_CONFIG_INSUFFICIENTWORKBUFFER = -38,      
    BSEC_E_CONFIG_INVALIDSTRINGSIZE = -40,           
    BSEC_E_CONFIG_INSUFFICIENTBUFFER = -41,          
    BSEC_E_SET_INVALIDCHANNELIDENTIFIER = -100,      
    BSEC_E_SET_INVALIDLENGTH = -104,                 
    BSEC_W_SC_CALL_TIMING_VIOLATION = 100,           
    BSEC_W_SC_MODEXCEEDULPTIMELIMIT = 101,             
    BSEC_W_SC_MODINSUFFICIENTWAITTIME = 102            
} bsec_library_return_t;







 
typedef struct
{
    uint8_t major;  
    uint8_t minor;  
    uint8_t major_bugfix;  
    uint8_t minor_bugfix;  
} bsec_version_t;













 
typedef struct
{
    




 
    int64_t time_stamp;        
    float signal;                
    uint8_t signal_dimensions;   
    uint8_t sensor_id;           
} bsec_input_t;









 
typedef struct
{
    int64_t time_stamp;          
    float signal;                
    uint8_t signal_dimensions;   
    uint8_t sensor_id;           
    
    

































      
    uint8_t accuracy;           
} bsec_output_t;






 
typedef struct
{
    



 
    float sample_rate;           
        
    












 
    uint8_t sensor_id;              
} bsec_sensor_configuration_t;












 
typedef struct
{
    int64_t next_call;                   
    uint32_t process_data;               
    uint16_t heater_temperature;         
    uint16_t heating_duration;           
    uint8_t run_gas;                     
    uint8_t pressure_oversampling;       
    uint8_t temperature_oversampling;    
    uint8_t humidity_oversampling;       
    uint8_t trigger_measurement;         
} bsec_bme_settings_t;

 


 





#line 74 ".\\bst_algo\\bsec_interface.h"






 
























































 


















 

bsec_library_return_t bsec_get_version(bsec_version_t * bsec_version_p);




















 

bsec_library_return_t bsec_init(void);








































































 
bsec_library_return_t bsec_update_subscription(const bsec_sensor_configuration_t * const requested_virtual_sensors,
                const uint8_t n_requested_virtual_sensors, bsec_sensor_configuration_t * required_sensor_settings,
                uint8_t * n_required_sensor_settings);





















































































 
 
bsec_library_return_t bsec_do_steps(const bsec_input_t * const inputs, const uint8_t n_inputs, bsec_output_t * outputs, uint8_t * n_outputs);


















 

bsec_library_return_t bsec_reset_output(uint8_t sensor_id);


































 

bsec_library_return_t bsec_set_configuration(const uint8_t * const serialized_settings,
                const uint32_t n_serialized_settings, uint8_t * work_buffer,
                const uint32_t n_work_buffer_size);




































 

bsec_library_return_t bsec_set_state(const uint8_t * const serialized_state, const uint32_t n_serialized_state,
                uint8_t * work_buffer, const uint32_t n_work_buffer_size);






































 

bsec_library_return_t bsec_get_configuration(const uint8_t config_id, uint8_t * serialized_settings, const uint32_t n_serialized_settings_max,
                uint8_t * work_buffer, const uint32_t n_work_buffer, uint32_t * n_serialized_settings);





































 

bsec_library_return_t bsec_get_state(const uint8_t state_set_id, uint8_t * serialized_state,
                const uint32_t n_serialized_state_max, uint8_t * work_buffer, const uint32_t n_work_buffer,
                uint32_t * n_serialized_state);
























 

bsec_library_return_t bsec_sensor_control(const int64_t time_stamp, bsec_bme_settings_t *sensor_settings);

   





#line 90 ".\\bst_exp\\bsec_integration.h"
#line 91 ".\\bst_exp\\bsec_integration.h"


 
 
 

 
typedef void (*sleep_fct)(uint32_t t_ms);

 
typedef int64_t (*get_timestamp_us_fct)();

 
typedef void (*output_ready_fct)(int64_t timestamp, float iaq, uint8_t iaq_accuracy, float temperature, float humidity,
    float pressure, float raw_temperature, float raw_humidity, float gas, bsec_library_return_t bsec_status);

 
typedef uint32_t (*state_load_fct)(uint8_t *state_buffer, uint32_t n_buffer);

 
typedef void (*state_save_fct)(const uint8_t *state_buffer, uint32_t length);

 
typedef uint32_t (*config_load_fct)(uint8_t *state_buffer, uint32_t n_buffer);
    
 

 
typedef struct{
	 
	int8_t bme680_status;
	 
	bsec_library_return_t bsec_status;
}return_values_init;
 
 
 












 
return_values_init bsec_iot_init(float sample_rate, float temperature_offset, bme680_com_fptr_t bus_write, bme680_com_fptr_t bus_read, 
    sleep_fct sleep, state_load_fct state_load, config_load_fct config_load);











  
void bsec_iot_loop(sleep_fct sleep, get_timestamp_us_fct get_timestamp_us, output_ready_fct output_ready,
    state_save_fct state_save, uint32_t save_intvl);







 

#line 15 "..\\main.c"
#line 1 ".\\nano_support\\Nano_support.h"
#line 2 ".\\nano_support\\Nano_support.h"
#line 1 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
 










 






































 















 

 
 
 



 



 
typedef enum IRQn {
     

    NonMaskableInt_IRQn   = -14,     
    HardFault_IRQn        = -13,     
    SVCall_IRQn           = -5,      
    PendSV_IRQn           = -2,      
    SysTick_IRQn          = -1,      

     
    BOD_IRQn              = 0,       
    WDT_IRQn              = 1,       
    EINT0_IRQn            = 2,       
    EINT1_IRQn            = 3,       
    GPABC_IRQn            = 4,       
    GPDEF_IRQn            = 5,       
    PWM0_IRQn             = 6,       
    TMR0_IRQn             = 8,       
    TMR1_IRQn             = 9,       
    TMR2_IRQn             = 10,      
    TMR3_IRQn             = 11,      
    UART0_IRQn            = 12,      
    UART1_IRQn            = 13,      
    SPI0_IRQn             = 14,      
    SPI1_IRQn             = 15,      
    SPI2_IRQn             = 16,      
    HIRC_IRQn             = 17,      
    I2C0_IRQn             = 18,      
    I2C1_IRQn             = 19,      
    SC0_IRQn              = 21,      
    SC1_IRQn              = 22,      
    CKSD_IRQn             = 24,      
    PDMA_IRQn             = 26,      
    SPI3_IRQn             = 27,      
    PDWU_IRQn             = 28,      
    ADC_IRQn              = 29,      
    ACMP_IRQn             = 30,      
    RTC_IRQn              = 31       
} IRQn_Type;






 

 






   


#line 1 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"
 




 

























 











#line 45 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"

















 




 



 

 













#line 120 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"



 







#line 162 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"

#line 1 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
 




 

























 












 



 

 
#line 1 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
 




 

























 










 



 

 
 





 
static __inline uint32_t __get_CONTROL(void)
{
  register uint32_t __regControl         __asm("control");
  return(__regControl);
}






 
static __inline void __set_CONTROL(uint32_t control)
{
  register uint32_t __regControl         __asm("control");
  __regControl = control;
}






 
static __inline uint32_t __get_IPSR(void)
{
  register uint32_t __regIPSR          __asm("ipsr");
  return(__regIPSR);
}






 
static __inline uint32_t __get_APSR(void)
{
  register uint32_t __regAPSR          __asm("apsr");
  return(__regAPSR);
}






 
static __inline uint32_t __get_xPSR(void)
{
  register uint32_t __regXPSR          __asm("xpsr");
  return(__regXPSR);
}






 
static __inline uint32_t __get_PSP(void)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}






 
static __inline void __set_PSP(uint32_t topOfProcStack)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}






 
static __inline uint32_t __get_MSP(void)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}






 
static __inline void __set_MSP(uint32_t topOfMainStack)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}






 
static __inline uint32_t __get_PRIMASK(void)
{
  register uint32_t __regPriMask         __asm("primask");
  return(__regPriMask);
}






 
static __inline void __set_PRIMASK(uint32_t priMask)
{
  register uint32_t __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}


#line 263 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"


#line 297 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"



 


 



 




 






 







 






 








 










 










 











 








 

__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
{
  rev16 r0, r0
  bx lr
}







 

__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}









 









 








 



__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;
  int32_t s = 4   * 8 - 1;  

  result = value;                       
  for (value >>= 1U; value; value >>= 1U)
  {
    result <<= 1U;
    result |= value & 1U;
    s--;
  }
  result <<= s;                         
  return(result);
}








 



#line 649 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"

   


 



 

#line 731 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
 


#line 54 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"

 
#line 84 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"

   

#line 164 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"
#line 1 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmFunc.h"
 




 

























 












 



 

 
#line 54 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmFunc.h"

 
#line 84 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmFunc.h"

 

#line 165 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"
















 
#line 198 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"

 






 
#line 214 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cm0.h"

 




 










 



 






 



 
typedef union
{
  struct
  {
    uint32_t _reserved0:28;               
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} APSR_Type;

 















 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:23;               
  } b;                                    
  uint32_t w;                             
} IPSR_Type;

 






 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:15;               
    uint32_t T:1;                         
    uint32_t _reserved1:3;                
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} xPSR_Type;

 





















 
typedef union
{
  struct
  {
    uint32_t _reserved0:1;                
    uint32_t SPSEL:1;                     
    uint32_t _reserved1:30;               
  } b;                                    
  uint32_t w;                             
} CONTROL_Type;

 



 







 



 
typedef struct
{
  volatile uint32_t ISER[1U];                
        uint32_t RESERVED0[31U];
  volatile uint32_t ICER[1U];                
        uint32_t RSERVED1[31U];
  volatile uint32_t ISPR[1U];                
        uint32_t RESERVED2[31U];
  volatile uint32_t ICPR[1U];                
        uint32_t RESERVED3[31U];
        uint32_t RESERVED4[64U];
  volatile uint32_t IP[8U];                  
}  NVIC_Type;

 







 



 
typedef struct
{
  volatile const  uint32_t CPUID;                   
  volatile uint32_t ICSR;                    
        uint32_t RESERVED0;
  volatile uint32_t AIRCR;                   
  volatile uint32_t SCR;                     
  volatile uint32_t CCR;                     
        uint32_t RESERVED1;
  volatile uint32_t SHP[2U];                 
  volatile uint32_t SHCSR;                   
} SCB_Type;

 















 



























 















 









 






 



 







 



 
typedef struct
{
  volatile uint32_t CTRL;                    
  volatile uint32_t LOAD;                    
  volatile uint32_t VAL;                     
  volatile const  uint32_t CALIB;                   
} SysTick_Type;

 












 



 



 









 








 
 







 






 







 


 







 

 










 









 


 



 





 

 
 









 
static __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}






 
static __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}








 
static __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
}






 
static __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}






 
static __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}








 
static __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
  }
  else
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
  }
}










 
static __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
  {
    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
  }
  else
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
  }
}





 
static __inline void NVIC_SystemReset(void)
{
  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
 
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
                 (1UL << 2U));
  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           

  for(;;)                                                            
  {
    __nop();
  }
}

 



 





 













 
static __inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);                                                    
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
  NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
                   (1UL << 1U)   |
                   (1UL );                          
  return (0UL);                                                      
}



 










#line 138 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\system_Nano103.h"
 








 












 

#line 34 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\system_Nano103.h"


extern uint32_t SystemCoreClock;         
extern uint32_t CyclesPerUs;             









 

extern void SystemCoreClockUpdate (void);
extern uint32_t SysGet_PLLClockFreq(void);








 
#line 139 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 140 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"

 
 
 



 


#pragma anon_unions



 



 

typedef struct {


    



















































































































































































































































 
    volatile const  uint32_t IRQ0_SRC;               
    volatile const  uint32_t IRQ1_SRC;               
    volatile const  uint32_t IRQ2_SRC;               
    volatile const  uint32_t IRQ3_SRC;               
    volatile const  uint32_t IRQ4_SRC;               
    volatile const  uint32_t IRQ5_SRC;               
    volatile const  uint32_t IRQ6_SRC;               
    volatile const  uint32_t IRQ7_SRC;               
    volatile const  uint32_t IRQ8_SRC;               
    volatile const  uint32_t IRQ9_SRC;               
    volatile const  uint32_t IRQ10_SRC;              
    volatile const  uint32_t IRQ11_SRC;              
    volatile const  uint32_t IRQ12_SRC;              
    volatile const  uint32_t IRQ13_SRC;              
    volatile const  uint32_t IRQ14_SRC;              
    volatile const  uint32_t IRQ15_SRC;              
    volatile const  uint32_t IRQ16_SRC;              
    volatile const  uint32_t IRQ17_SRC;              
    volatile const  uint32_t IRQ18_SRC;              
    volatile const  uint32_t IRQ19_SRC;              
    volatile const  uint32_t IRQ20_SRC;              
    volatile const  uint32_t IRQ21_SRC;              
    volatile const  uint32_t IRQ22_SRC;              
    volatile const  uint32_t IRQ23_SRC;              
    volatile const  uint32_t IRQ24_SRC;              
    volatile const  uint32_t IRQ25_SRC;              
    volatile const  uint32_t IRQ26_SRC;              
    volatile const  uint32_t IRQ27_SRC;              
    volatile const  uint32_t IRQ28_SRC;              
    volatile const  uint32_t IRQ29_SRC;              
    volatile const  uint32_t IRQ30_SRC;              
    volatile const  uint32_t IRQ31_SRC;              
    volatile uint32_t NMI_SEL;                
    volatile uint32_t MCU_IRQ;                


} INT_T;




 







































































































   
   


 



 

typedef struct {


    






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
    volatile const  uint32_t PDID;                   
    volatile uint32_t RSTSTS;                 
    volatile uint32_t IPRST1;                 
    volatile uint32_t IPRST2;                 
    
    volatile const  uint32_t RESERVE0[4];
    
    volatile uint32_t TEMPCTL;                
    
    volatile const  uint32_t RESERVE1[1];
    
    volatile uint32_t RCCFCTL;                
    
    volatile const  uint32_t RESERVE2[1];
    
    volatile uint32_t GPA_MFPL;               
    volatile uint32_t GPA_MFPH;               
    volatile uint32_t GPB_MFPL;               
    volatile uint32_t GPB_MFPH;               
    volatile uint32_t GPC_MFPL;               
    volatile uint32_t GPC_MFPH;               
    volatile uint32_t GPD_MFPL;               
    volatile uint32_t GPD_MFPH;               
    volatile uint32_t GPE_MFPL;               
    
    volatile const  uint32_t RESERVE3[1];
    
    volatile uint32_t GPF_MFPL;               
    
    volatile const  uint32_t RESERVE4[1];
    
    volatile uint32_t PORCTL;                 
    volatile uint32_t BODCTL;                 
    
    volatile const  uint32_t RESERVE5[1];
    
    volatile uint32_t IVREFCTL;               
    volatile uint32_t LDOCTL;                 
    volatile uint32_t BATDIVCTL;              
    
    volatile const  uint32_t RESERVE6[1];
    
    volatile const  uint32_t WKSTS;                  
    volatile uint32_t IRC0TCTL;               
    volatile uint32_t IRC0TIEN;               
    volatile uint32_t IRC0TISTS;              
    
    volatile const  uint32_t RESERVE7[1];
    
    volatile uint32_t IRC1TCTL;               
    volatile uint32_t IRC1TIEN;               
    volatile uint32_t IRC1TISTS;              
    
    volatile const  uint32_t RESERVE8[1];
    
    volatile uint32_t MIRCTCTL;               
    volatile uint32_t MIRCTIEN;               
    volatile uint32_t MIRCTISTS;              
    
    volatile const  uint32_t RESERVE9[21];
    
    volatile  uint32_t REGLCTL;                
    
    volatile const  uint32_t RESERVE10[7];
    
    volatile uint32_t RPDBCLK;                

} SYS_T;




 






























































































































































































































































































































































































































































































   
   


 



 

typedef struct {


    





















































































































































































































































































































































































































































































































 
    volatile uint32_t PWRCTL;                 
    volatile uint32_t AHBCLK;                 
    volatile uint32_t APBCLK;                 
    volatile const  uint32_t STATUS;                 
    volatile uint32_t CLKSEL0;                
    volatile uint32_t CLKSEL1;                
    volatile uint32_t CLKSEL2;                
    volatile uint32_t CLKDIV0;                
    volatile uint32_t CLKDIV1;                
    volatile uint32_t PLLCTL;                 
    volatile uint32_t CLKOCTL;                
    
    volatile const  uint32_t RESERVE0[1];
    
    volatile uint32_t WKINTSTS;               
    volatile uint32_t APBDIV;                 
    volatile uint32_t CLKDCTL;                
    volatile uint32_t CLKDIE;                 
    volatile uint32_t CLKDSTS;                
    volatile uint32_t CDUPB;                  
    volatile uint32_t CDLOWB;                 
} CLK_T;




 







































































































































































































































































































   
   


 



 

typedef struct {


    













































































































































































































































































 
    volatile uint32_t ISPCTL;                 
    volatile uint32_t ISPADDR;                
    volatile uint32_t ISPDAT;                 
    volatile uint32_t ISPCMD;                 
    volatile uint32_t ISPTRG;                 
    volatile const  uint32_t DFBA;                   
    volatile uint32_t FTCTL;                  
    
    volatile const  uint32_t RESERVE0[9];
    
    volatile uint32_t ISPSTS;                 
    
    volatile const  uint32_t RESERVE1[3];
    
    volatile  uint32_t KEY0;                   
    volatile  uint32_t KEY1;                   
    volatile  uint32_t KEY2;                   
    volatile uint32_t KEYTRG;                 
    volatile uint32_t KEYSTS;                 
    volatile const  uint32_t KECNT;                  
    volatile const  uint32_t KPCNT;                  

} FMC_T;




 







































































































   
   


 



 

typedef struct {


    







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
    volatile uint32_t MODE;                
    volatile uint32_t DINOFF;              
    volatile uint32_t DOUT;                
    volatile uint32_t DATMSK;              
    volatile const  uint32_t PIN;                 
    volatile uint32_t DBEN;                
    volatile uint32_t INTTYPE;             
    volatile uint32_t INTEN;               
    volatile uint32_t INTSRC;              
    volatile uint32_t PUEN;                
    volatile const  uint32_t INTSTS;              

} GPIO_T;

typedef struct {

    





























 
    volatile uint32_t DBCTL;             
} GP_DB_T;




 



























































































































































































































































































































































































































































































































































































































































   
   

 



 

typedef struct {


    




























































































































































 
    volatile uint32_t CTLn;                   
    volatile uint32_t SAn;                    
    volatile uint32_t DAn;                    
    volatile uint32_t CNTn;                   
    
    volatile const  uint32_t RESERVE0[1];
    
    volatile const  uint32_t CSAn;                   
    volatile const  uint32_t CDAn;                   
    volatile const  uint32_t CCNTn;                  
    volatile uint32_t INTENn;                 
    volatile uint32_t INTSTSn;                
    volatile uint32_t TOCn;                   

} PDMA_CH_T;



typedef struct {


    















































































































































 
    volatile uint32_t CTL;                    
    volatile uint32_t DMASA;                  
    
    volatile const  uint32_t RESERVE0[1];
    
    volatile uint32_t DMABCNT;                
    
    volatile const  uint32_t RESERVE1[1];
    
    volatile const  uint32_t DMACSA;                 
    
    volatile const  uint32_t RESERVE2[1];
    
    volatile const  uint32_t DMACBCNT;               
    volatile uint32_t DMAINTEN;               
    volatile uint32_t DMAISTS;                
    
    volatile const  uint32_t RESERVE3[22];
    
    volatile uint32_t DAT;                    
    volatile uint32_t SEED;                   
    volatile const  uint32_t CHECKSUM;               

} DMA_CRC_T;



typedef struct {


    


























































































 
    volatile uint32_t GCTL;                   
    volatile uint32_t REQSEL0;                
    volatile uint32_t REQSEL1;                
    volatile const  uint32_t GINTSTS;                

} DMA_GCR_T;




 









































































   





 





























































   




 











































   
   


 



 

typedef struct {


    















































































































































































































































 
    volatile uint32_t CTL;                    
    volatile uint32_t PRECNT;                 
    volatile uint32_t CMP;                    
    volatile uint32_t INTEN;                  
    volatile uint32_t INTSTS;                 
    volatile uint32_t CNT;                    
    volatile const  uint32_t CAP;                    
    
    volatile const  uint32_t RESERVE0[1];
    
    volatile uint32_t ECTL;                   

} TIMER_T;




 






































































































   
   


 



 

typedef struct {


    

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
    volatile uint32_t CTL0;                   
    volatile uint32_t CTL1;                   
    
    volatile const  uint32_t RESERVE0[2];
    
    volatile uint32_t CLKSRC;                 
    volatile uint32_t CLKPSC0_1;              
    volatile uint32_t CLKPSC2_3;              
    volatile uint32_t CLKPSC4_5;              
    volatile uint32_t CNTEN;                  
    volatile uint32_t CNTCLR;                 
    
    volatile const  uint32_t RESERVE1[2];
    
    volatile uint32_t PERIOD[6];              
    
    volatile const  uint32_t RESERVE4[2];
    
    volatile uint32_t CMPDAT[6];              
    
    volatile const  uint32_t RESERVE5[2];
    
    volatile uint32_t DTCTL0_1;               
    volatile uint32_t DTCTL2_3;               
    volatile uint32_t DTCTL4_5;               
    
    volatile const  uint32_t RESERVE6[5];
    
    volatile const  uint32_t CNT[6];                 
    
    volatile const  uint32_t RESERVE9[2];
    
    volatile uint32_t WGCTL0;                 
    volatile uint32_t WGCTL1;                 
    volatile uint32_t MSKEN;                  
    volatile uint32_t MSK;                    
    volatile uint32_t BNF;                    
    volatile uint32_t FAILBRK;                
    volatile uint32_t BRKCTL0_1;              
    volatile uint32_t BRKCTL2_3;              
    volatile uint32_t BRKCTL4_5;              
    volatile uint32_t POLCTL;                 
    volatile uint32_t POEN;                   
    volatile  uint32_t SWBRK;                  
    volatile uint32_t INTEN0;                 
    volatile uint32_t INTEN1;                 
    volatile uint32_t INTSTS0;                
    volatile uint32_t INTSTS1;                
    
    volatile const  uint32_t RESERVE10[2];
    
    volatile uint32_t ADCTS0;                 
    volatile uint32_t ADCTS1;                 
    
    volatile const  uint32_t RESERVE11[8];
    
    volatile uint32_t STATUS;                 
    
    volatile const  uint32_t RESERVE12[55];
    
    volatile uint32_t CAPINEN;                
    volatile uint32_t CAPCTL;                 
    volatile const  uint32_t CAPSTS;                 
    volatile const  uint32_t RCAPDAT0;               
    volatile const  uint32_t FCAPDAT0;               
    volatile const  uint32_t RCAPDAT1;               
    volatile const  uint32_t FCAPDAT1;               
    volatile const  uint32_t RCAPDAT2;               
    volatile const  uint32_t FCAPDAT2;               
    volatile const  uint32_t RCAPDAT3;               
    volatile const  uint32_t FCAPDAT3;               
    volatile const  uint32_t RCAPDAT4;               
    volatile const  uint32_t FCAPDAT4;               
    volatile const  uint32_t RCAPDAT5;               
    volatile const  uint32_t FCAPDAT5;               
    
    volatile const  uint32_t RESERVE13[5];
    
    volatile uint32_t CAPIEN;                 
    volatile uint32_t CAPIF;                  
    
    volatile const  uint32_t RESERVE14[42];
    
    volatile uint32_t SELFTEST;               
    volatile const  uint32_t PBUF0;                  
    
    volatile const  uint32_t RESERVE15[1];
    
    volatile const  uint32_t PBUF2;                  
    
    volatile const  uint32_t RESERVE16[1];
    
    volatile const  uint32_t PBUF4;                  
    
    volatile const  uint32_t RESERVE17[1];
    
    volatile const  uint32_t CMPBUF0;                
    volatile const  uint32_t CMPBUF1;                
    volatile const  uint32_t CMPBUF2;                
    volatile const  uint32_t CMPBUF3;                
    volatile const  uint32_t CMPBUF4;                
    volatile const  uint32_t CMPBUF5;                

} PWM_T;




 








































































































































































































































































































































































































































































































































   
   


 



 

typedef struct {


    









































































 
    volatile uint32_t CTL;                    
    volatile uint32_t INTEN;                    
    volatile uint32_t STATUS;                    

} WDT_T;




 


































   
   


 



 

typedef struct {


    





















































 
    volatile  uint32_t RLDCNT;                    
    volatile uint32_t CTL;                     
    volatile uint32_t INTEN;                    
    volatile uint32_t STATUS;                    
    volatile const  uint32_t CNT;                    

} WWDT_T;




 




























   
   


 



 

typedef struct {


    







































































































































































































































































































 
    volatile uint32_t INIT;                   
    volatile uint32_t RWEN;                   
    volatile uint32_t FREQADJ;                    
    volatile uint32_t TIME;                   
    volatile uint32_t CAL;                    
    volatile uint32_t CLKFMT;                 
    volatile uint32_t WEEKDAY;                
    volatile uint32_t TALM;                   
    volatile uint32_t CALM;                   
    volatile const  uint32_t LEAPYEAR;               
    volatile uint32_t INTEN;                  
    volatile uint32_t INTSTS;                 
    volatile uint32_t TICK;                   
    volatile uint32_t TAMSK;                  
    volatile uint32_t CAMSK;                  
    volatile uint32_t SPRCTL;                 
    volatile uint32_t SPR[5];                   
    
    volatile const  uint32_t RESERVE0[43];
    
    volatile uint32_t LXTCTL;                 
    volatile uint32_t LXTOCTL;                
    volatile uint32_t LXTICTL;                
    volatile uint32_t TAMPCTL;                

} RTC_T;




 






















































































































































































































   
   


 



 

typedef struct {


    

























































































































































































































































































































































































































































































































































 
    volatile uint32_t DAT;                    
    volatile uint32_t CTRL;                    
    volatile uint32_t LINE;                  
    volatile uint32_t INTEN;                    
    volatile uint32_t INTSTS;                    
    volatile uint32_t TRSR;                   
    volatile uint32_t FIFOSTS;                    
    volatile uint32_t MODEM;                   
    volatile uint32_t TOUT;                  
    volatile uint32_t BAUD;                   
    
    volatile const  uint32_t RESERVE0[2];
    
    volatile uint32_t IRDA;                   
    volatile uint32_t ALTCTL;                
    volatile uint32_t FUNCSEL;                
    volatile uint32_t BRCOMPAT;               
    volatile uint32_t WKUPEN;                 
    volatile uint32_t WKUPSTS;                

} UART_T;




 



























































































































































































































































































   
   


 



 

typedef struct {


    




















































































































































































































































































































































































































































































































































 
    volatile uint32_t DAT;                    
    volatile uint32_t CTL;                    
    volatile uint32_t ALTCTL;                 
    volatile uint32_t EGT;                    
    volatile uint32_t RXTOUT;                 
    volatile uint32_t ETUCTL;                 
    volatile uint32_t INTEN;                  
    volatile uint32_t INTSTS;                 
    volatile uint32_t STATUS;                 
    volatile uint32_t PINCTL;                 
    volatile uint32_t TMRCTL0;                
    volatile uint32_t TMRCTL1;                
    volatile uint32_t TMRCTL2;                
    volatile uint32_t UARTCTL;                
    
    volatile const  uint32_t RESERVE0[2];
    
    volatile uint32_t ACTCTL;                 

} SC_T;




 







































































































































































































































































































   
   


 



 

typedef struct {


    


































































































































































































 
    volatile uint32_t CTL;                    
    volatile uint32_t INTSTS;                 
    volatile const  uint32_t STATUS;                 
    volatile uint32_t CLKDIV;                 
    volatile uint32_t TOCTL;                  
    volatile uint32_t DAT;                    
    volatile uint32_t ADDR0;                  
    volatile uint32_t ADDR1;                  
    
    volatile const  uint32_t RESERVE0[2];
    
    volatile uint32_t ADDRMSK0;               
    volatile uint32_t ADDRMSK1;               
    
    volatile const  uint32_t RESERVE1[4];
    
    volatile uint32_t CTL2;                   
    volatile uint32_t STATUS2;                

} I2C_T;




 







































































































   
   


 



 

typedef struct {


    












































































































































































































































































































































































 
    volatile uint32_t CTL;                    
    volatile uint32_t STATUS;                 
    volatile uint32_t CLKDIV;                 
    volatile uint32_t SSCTL;                  
    volatile const  uint32_t RX0;                    
    volatile const  uint32_t RX1;                    
    
    volatile const  uint32_t RESERVE0[2];
    
    volatile  uint32_t TX0;                    
    volatile  uint32_t TX1;                    
    
    volatile const  uint32_t RESERVE1[4];
    
    volatile uint32_t PDMACTL;                
    volatile uint32_t FIFOCTL;                
} SPI_T;




 


















































































































































































   
   


 



 

typedef struct {


    

















































































































































































































































































































































 
    volatile const  uint32_t DAT[18];                
    volatile uint32_t CTL;                    
    volatile uint32_t CHEN;                   
    volatile uint32_t CMP0;                   
    volatile uint32_t CMP1;                   
    volatile uint32_t STATUS;                 
    
    volatile const  uint32_t RESERVE1[1];
    
    volatile const  uint32_t PDMA;                   
    volatile uint32_t PWD;                    
    volatile uint32_t CALCTL;                 
    volatile uint32_t CALWORD;                
    volatile uint32_t EXTSMPT0;               
    volatile uint32_t EXTSMPT1;               

} ADC_T;




 










































































































































































































   
   


 



 

typedef struct {


    


















































 
    volatile uint32_t CTL0;                   
    volatile uint32_t STATUS;                 
    volatile uint32_t VREF;                   

} ACMP_T;




 































   
   




#pragma no_anon_unions





 
 






 

#line 13682 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"












#line 13713 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"

   





 
#line 13742 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"

#line 13759 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"

   

   




 

typedef volatile unsigned char  vu8;        
typedef volatile unsigned short vu16;       
typedef volatile unsigned long  vu32;       





 







 







 








 







 








 







 







 






 








 







 








 







 







 






 


   

 
 
 



 











 
#line 13947 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"

 










   

   






 
 
 
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 








 










 



 



 

 
 
 
#line 55 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"

 
 
 


 
#line 79 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"

 





 
#line 93 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


 





 




















 




 




 
#line 166 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 217 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 247 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 280 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 307 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 325 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 332 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 
#line 339 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 



 
#line 362 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sys.h"

   



 





 

												






 







 







 







 







 









 







 







 







 







 























 








 








 








 









 








 








 








 









 








 








 







 







 















 








 
static __inline void SYS_UnlockReg(void)
{
    while(((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL != (0x1ul << (0))) {
        ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0x59;
        ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0x16;
        ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0x88;
    }
}







 
static __inline void SYS_LockReg(void)
{
    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0;
}








 









 









 









 









 









 


void SYS_ClearResetSrc(uint32_t u32Src);
uint32_t SYS_GetBODStatus(void);
uint32_t SYS_GetResetSrc(void);
uint32_t SYS_IsRegLocked(void);
void SYS_LockReg(void);
void SYS_UnlockReg(void);
uint32_t  SYS_ReadPDID(void);
void SYS_ResetChip(void);
void SYS_ResetCPU(void);
void SYS_ResetModule(uint32_t u32ModuleIndex);
void SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel);
void SYS_DisableBOD(void);
void SYS_EnableLPBOD(int32_t i32Mode, uint32_t u32BODLevel);
void SYS_DisableLPBOD(void);
void SYS_EnableHIRC0Trim(uint32_t u32TrimSel,uint32_t u32TrimEnInt);
void SYS_DisableHIRC0Trim(void);
void SYS_EnableHIRC1Trim(uint32_t u32TrimSel,uint32_t u32TrimEnInt);
void SYS_DisableHIRC1Trim(void);
void SYS_EnableMIRCTrim(uint32_t u32TrimSel,uint32_t u32TrimEnInt);
void SYS_DisableMIRCTrim(void);
   

   

   







 
#line 13972 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"
 








 











 



 



 





 
#line 48 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 57 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 






 
#line 86 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 
#line 96 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 





#line 121 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 128 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 135 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 
#line 147 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"
 
#line 188 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"
 
#line 231 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 
#line 243 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 
#line 255 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 



 


 



 
 
 
#line 280 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 289 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 
 
 
#line 319 "..\\..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

   




 
void CLK_DisableCKO(void);
void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En);
void CLK_PowerDown(void);
void CLK_Idle(void);
uint32_t CLK_GetHXTFreq(void);
uint32_t CLK_GetLXTFreq(void);
uint32_t CLK_GetHCLKFreq(void);
uint32_t CLK_GetPCLK0Freq(void);
uint32_t CLK_GetPCLK1Freq(void);
uint32_t CLK_GetCPUFreq(void);
uint32_t CLK_GetPLLClockFreq(void);
uint32_t CLK_SetCoreClock(uint32_t u32Hclk);
void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv);
void CLK_SetPCLK0(uint32_t u32ClkDiv);
void CLK_SetPCLK1(uint32_t u32ClkDiv);
void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv);
void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc);
void CLK_EnableXtalRC(uint32_t u32ClkMask);
void CLK_DisableXtalRC(uint32_t u32ClkMask);
void CLK_EnableModuleClock(uint32_t u32ModuleIdx);
void CLK_DisableModuleClock(uint32_t u32ModuleIdx);
uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq);
void CLK_DisablePLL(void);
void CLK_SysTickDelay(uint32_t us);
void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count);
void CLK_DisableSysTick(void);
uint32_t CLK_WaitClockReady(uint32_t u32ClkMask);

   

   

   







 
#line 13973 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"
 








 











 



 



 



#line 69 "..\\..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"

   




 











































 
#line 131 "..\\..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"








 








 








 








 









 








 








 








 








 








 








 








































 







 







 




void ACMP_Open(ACMP_T *acmp, uint32_t u32ChNum, uint32_t u32NegSrc, uint32_t u32HysteresisEn);
void ACMP_Close(ACMP_T *acmp, uint32_t u32ChNum);


   

   

   







 
#line 13974 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\adc.h"
 








 











 



 



 

#line 71 "..\\..\\..\\..\\Library\\StdDriver\\inc\\adc.h"

   




 







 











 











 











 










 










 







 







 




















 
#line 190 "..\\..\\..\\..\\Library\\StdDriver\\inc\\adc.h"





 
















 
#line 222 "..\\..\\..\\..\\Library\\StdDriver\\inc\\adc.h"





 








 







 







 












 











 









 









 







 







 


void ADC_Open(ADC_T *adc,
              uint32_t u32InputMode,
              uint32_t u32OpMode,
              uint32_t u32ChMask);
void ADC_Close(ADC_T *adc);
void ADC_EnableHWTrigger(ADC_T *adc,
                         uint32_t u32Source,
                         uint32_t u32Param);
void ADC_DisableHWTrigger(ADC_T *adc);
void ADC_EnableTimerTrigger(ADC_T *adc,
                            uint32_t u32Source,
                            uint32_t u32PDMACnt);
void ADC_DisableTimerTrigger(ADC_T *adc);
void ADC_SetExtraSampleTime(ADC_T *adc,
                            uint32_t u32ChNum,
                            uint32_t u32SampleTime);
void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask);
void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask);



   

   

   







 
#line 13975 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"
 









 










 



 




 


 
 
 
#line 43 "..\\..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"







 
 
 
#line 64 "..\\..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"









   




 

 
 
 

#line 96 "..\\..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"

 
 
 

extern void FMC_Close(void);
extern int32_t FMC_Erase(uint32_t u32PageAddr);
extern int32_t FMC_GetBootSource(void);
extern void FMC_Open(void);
extern uint32_t FMC_Read(uint32_t u32Addr);
extern uint32_t FMC_ReadCID(void);
extern uint32_t FMC_ReadPID(void);
extern uint32_t FMC_ReadUCID(uint32_t u32Index);
extern uint32_t FMC_ReadUID(uint32_t u32Index);
extern uint32_t FMC_ReadDataFlashBaseAddr(void);
extern void FMC_SetVectorPageAddr(uint32_t u32PageAddr);
extern uint32_t FMC_GetVectorPageAddr(void);
extern void FMC_Write(uint32_t u32Addr, uint32_t u32Data);
extern int32_t  FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count);
extern int32_t  FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count);
extern int32_t  FMC_GetChkSum(uint32_t u32Addr, uint32_t u32Count, uint32_t *u32ChkSum);
extern uint32_t FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count);
extern int32_t  FMC_SKey_Setup(uint32_t key[3], uint32_t kpmax, uint32_t kemax, int lock_CONFIG);
extern int32_t  FMC_SKey_Compare(uint32_t key[3]);


   

   

   







 
#line 13976 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"
 








 











 



 



 


 
 
 




 
 
 






 
 
 



 
 
 






#line 80 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"














 
#line 112 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"

#line 129 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"

#line 146 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"

#line 163 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"

#line 174 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"

#line 183 "..\\..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"

   



 










 











 











 











 











 











 











 












 



















 










 











 











 











 










 













 












 














 












 



void GPIO_SetMode(GPIO_T *gpio, uint32_t u32PinMask, uint32_t u32Mode);
void GPIO_EnableInt(GPIO_T *gpio, uint32_t u32Pin, uint32_t u32IntAttribs);
void GPIO_DisableInt(GPIO_T *gpio, uint32_t u32Pin);



   

   

   







 
#line 13977 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"
 








 











 



 



 









   




 







 







 







 











 











 








 







 









 







 









 









 







 








 







 







 







 







 







 







 







 







 









 










 







 







 







 







 


uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock);
void I2C_Close(I2C_T *i2c);
void I2C_ClearTimeoutFlag(I2C_T *i2c);
void I2C_Trigger(I2C_T *i2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Si, uint8_t u8Ack);
void I2C_DisableInt(I2C_T *i2c);
void I2C_EnableInt(I2C_T *i2c);
uint32_t I2C_GetBusClockFreq(I2C_T *i2c);
uint32_t I2C_SetBusClockFreq(I2C_T *i2c, uint32_t u32BusClock);
uint32_t I2C_GetIntFlag(I2C_T *i2c);
void I2C_ClearIntFlag(I2C_T *i2c);
uint32_t I2C_GetStatus(I2C_T *i2c);
uint32_t I2C_GetData(I2C_T *i2c);
void I2C_SetData(I2C_T *i2c, uint8_t u8Data);
void I2C_SetSlaveAddr(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddr, uint8_t u8GCMode);
void I2C_SetSlaveAddrMask(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddrMask);
void I2C_EnableTimeout(I2C_T *i2c, uint8_t u8LongTimeout);
void I2C_DisableTimeout(I2C_T *i2c);
void I2C_EnableWakeup(I2C_T *i2c);
void I2C_DisableWakeup(I2C_T *i2c);

   

   

   







 
#line 13978 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\crc.h"
 








 











 



 



 

 
 
 





 
 
 





 
 
 





   



 









 










 










 










 










 










 










 



 
void CRC_Open(uint32_t u32Mode, uint32_t u32Attribute, uint32_t u32Seed, uint32_t u32DataLen);
void CRC_StartDMATransfer(uint32_t u32SrcAddr, uint32_t u32ByteCount);
uint32_t CRC_GetChecksum(void);


   

   

   







 
#line 13979 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"
 








 











 



 



 

 
 
 




 
 
 
#line 48 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

 
 
 
#line 62 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

#line 71 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

 
 
 
#line 83 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

   



 










 











 












 












 












 












 












 















 














 


void PDMA_Open(uint32_t u32Mask);
void PDMA_Close(void);
void PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount);
void PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl);
void PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Periphral, uint32_t u32ScatterEn, uint32_t u32DescAddr);
void PDMA_SetTimeOut(uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt);
void PDMA_Trigger(uint32_t u32Ch);
void PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask);
void PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask);

   

   

   







 
#line 13980 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"
 








 











 



 



 
#line 38 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 




 
 
 



 
 
 





 
 
 





 
 
 
#line 78 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 













 
 
 





 
 
 



 
 
 



 
 
 
#line 126 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 






   




 







 








 










 









 









 












 
















 











 












 













 
#line 267 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"









 
#line 285 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"





























 
#line 327 "..\\..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"












 











 




 
 
 
uint32_t PWM_ConfigCaptureChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
uint32_t PWM_ConfigOutputChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
void PWM_Start(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_Stop(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_ForceStop(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
void PWM_DisableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
uint32_t PWM_GetADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableFaultBrake(PWM_T *pwm, uint32_t u32ChannelMask, uint32_t u32LevelMask, uint32_t u32BrakeSource);
void PWM_EnableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Duration);
void PWM_DisableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
void PWM_DisableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
void PWM_ClearCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
uint32_t PWM_GetCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
void PWM_DisableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
void PWM_DisableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
void PWM_EnableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_DisableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_ClearFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
uint32_t PWM_GetFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_EnablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
void PWM_DisablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_DisableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_SetClockSource(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
void PWM_EnableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
void PWM_DisableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_EnableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_DisableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_SetBrakePinSource(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32SelAnotherModule);
uint32_t PWM_GetWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);


   

   

   







 
#line 13981 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"
 








 











 



 




 















#line 55 "..\\..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"

#line 63 "..\\..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"






   




 



 
typedef struct {
    uint32_t u32Year;           
    uint32_t u32Month;          
    uint32_t u32Day;            
    uint32_t u32DayOfWeek;      
    uint32_t u32Hour;           
    uint32_t u32Minute;         
    uint32_t u32Second;         
    uint32_t u32TimeScale;      
    uint32_t u32AmPm;           
} S_RTC_TIME_DATA_T;

   




 








 









 










 










 









 









 









 









 









 










 



void RTC_Open(S_RTC_TIME_DATA_T *sPt);
void RTC_Close(void);
void RTC_32KCalibration(int32_t i32FrequencyX100);
void RTC_SetTickPeriod(uint32_t u32TickSelection);
void RTC_EnableInt(uint32_t u32IntFlagMask);
void RTC_DisableInt(uint32_t u32IntFlagMask);
uint32_t RTC_GetDayOfWeek(void);
void RTC_DisableTamperDetection(void);
void RTC_EnableTamperDetection(uint32_t u32PinCondition);
void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day);
void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek);
void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt);



   


   

   









 

#line 13982 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"
 








 











 



 



 
#line 37 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"

#line 48 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"


   




 


















 



















 








 
#line 111 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"








 
#line 133 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"






 
#line 153 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"






 
#line 173 "..\\..\\..\\..\\Library\\StdDriver\\inc\\sc.h"





 








 









 







 
static __inline void SC_SetTxRetry(SC_T *sc, uint32_t u32Count)
{
    
    sc->CTL &= ~((0x7ul << (20)) | (0x1ul << (23)));

    if(u32Count != 0) {
        sc->CTL |= ((u32Count - 1) << (20)) | (0x1ul << (23));
    }
}






 
static __inline void  SC_SetRxRetry(SC_T *sc, uint32_t u32Count)
{
    
    sc->CTL &= ~((0x7ul << (16)) | (0x1ul << (19)));

    if(u32Count != 0) {
        sc->CTL |= ((u32Count - 1) << (16)) | (0x1ul << (19));
    }
}


uint32_t SC_IsCardInserted(SC_T *sc);
void SC_ClearFIFO(SC_T *sc);
void SC_Close(SC_T *sc);
void SC_Open(SC_T *sc, uint32_t u32CardDet, uint32_t u32PWR);
void SC_ResetReader(SC_T *sc);
void SC_SetBlockGuardTime(SC_T *sc, uint32_t u32BGT);
void SC_SetCharGuardTime(SC_T *sc, uint32_t u32CGT);
void SC_StopAllTimer(SC_T *sc);
void SC_StartTimer(SC_T *sc, uint32_t u32TimerNum, uint32_t u32Mode, uint32_t u32ETUCount);
void SC_StopTimer(SC_T *sc, uint32_t u32TimerNum);
uint32_t SC_GetInterfaceClock(SC_T *sc);

   

   

   







 
#line 13983 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\scuart.h"
 








 











 



 



 













   




 

 






 









 









 








 









 









 



 






 









 










 










 









 


 











 












 














 











 










 











 


void SCUART_Close(SC_T* sc);
uint32_t SCUART_Open(SC_T* sc, uint32_t u32baudrate);
uint32_t SCUART_Read(SC_T* sc, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
uint32_t SCUART_SetLineConfig(SC_T* sc, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t  u32StopBits);
void SCUART_SetTimeoutCnt(SC_T* sc, uint32_t u32TOC);
void SCUART_Write(SC_T* sc,uint8_t *pu8TxBuf, uint32_t u32WriteBytes);

   

   

   







 
#line 13984 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\spi.h"
 








 











 



 




 

















#line 55 "..\\..\\..\\..\\Library\\StdDriver\\inc\\spi.h"


   




 






 







 







 







 







 







 









 









 









 







 






 








 








 








 








 








 








 










 







 







 








 







 







 








 
static __inline void SPI_SET_DATA_WIDTH(SPI_T *spi, uint32_t u32Width)
{
    if(u32Width == 32)
        u32Width = 0;

    spi->CTL = (spi->CTL & ~(0x1ful << (3))) | (u32Width << (3));
}








 







 







 







 







 







 







 







 







 







 







 


uint32_t SPI_Open(SPI_T *spi, uint32_t u32MasterSlave, uint32_t u32SPIMode, uint32_t u32DataWidth, uint32_t u32BusClock);
void SPI_Close(SPI_T *spi);
void SPI_ClearRxFIFO(SPI_T *spi);
void SPI_ClearTxFIFO(SPI_T *spi);
void SPI_DisableAutoSS(SPI_T *spi);
void SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
uint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock);
void SPI_EnableFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
void SPI_DisableFIFO(SPI_T *spi);
uint32_t SPI_GetBusClock(SPI_T *spi);
void SPI_EnableInt(SPI_T *spi, uint32_t u32Mask);
void SPI_DisableInt(SPI_T *spi, uint32_t u32Mask);
void SPI_EnableWakeup(SPI_T *spi);
void SPI_DisableWakeup(SPI_T *spi);
   

   

   







 
#line 13985 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\timer.h"
 








 











 



 



 





















   




 







 









 








 







 
static __inline void TIMER_Start(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (0));
}





 
static __inline void TIMER_Stop(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (0));
}






 
static __inline void TIMER_EnableWakeup(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (2));
}





 
static __inline void TIMER_DisableWakeup(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (2));
}






 
static __inline void TIMER_EnableCaptureDebounce(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (22));
}





 
static __inline void TIMER_DisableCaptureDebounce(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (22));
}






 
static __inline void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (14));
}





 
static __inline void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (14));
}





 
static __inline void TIMER_EnableInt(TIMER_T *timer)
{
    timer->INTEN |= (0x1ul << (0));
}





 
static __inline void TIMER_DisableInt(TIMER_T *timer)
{
    timer->INTEN &= ~(0x1ul << (0));
}





 
static __inline void TIMER_EnableCaptureInt(TIMER_T *timer)
{
    timer->INTEN |= (0x1ul << (1));
}





 
static __inline void TIMER_DisableCaptureInt(TIMER_T *timer)
{
    timer->INTEN &= ~(0x1ul << (1));
}







 
static __inline uint32_t TIMER_GetIntFlag(TIMER_T *timer)
{
    return(timer->INTSTS & (0x1ul << (0)) ? 1 : 0);
}





 
static __inline void TIMER_ClearIntFlag(TIMER_T *timer)
{
    timer->INTSTS = (0x1ul << (0));
}







 
static __inline uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
{
    return(timer->INTSTS & (0x1ul << (1)) ? 1 : 0);
}





 
static __inline void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
{
    timer->INTSTS = (0x1ul << (1));
}







 
static __inline uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
{
    return (timer->INTSTS & (0x1ul << (4)) ? 1 : 0);
}





 
static __inline void TIMER_ClearWakeupFlag(TIMER_T *timer)
{
    timer->INTSTS = (0x1ul << (4));
}





 
static __inline uint32_t TIMER_GetCaptureData(TIMER_T *timer)
{
    return timer->CAP;
}





 
static __inline uint32_t TIMER_GetCounter(TIMER_T *timer)
{
    return (timer->CNT & 0xFFFFFF);
}

uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq);
void TIMER_Close(TIMER_T *timer);
void TIMER_Delay(TIMER_T *timer, uint32_t u32Usec);
void TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge);
void TIMER_DisableCapture(TIMER_T *timer);
void TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge);
void TIMER_DisableEventCounter(TIMER_T *timer);
uint32_t TIMER_GetModuleClock(TIMER_T *timer);
void TIMER_ResetCounter(TIMER_T *timer);
void TIMER_EnableFreqCounter(TIMER_T *timer,
                             uint32_t u32DropCount,
                             uint32_t u32Timeout,
                             uint32_t u32EnableInt);
void TIMER_DisableFreqCounter(TIMER_T *timer);
void TIMER_SetTriggerSource(TIMER_T *timer, uint32_t u32Src);
void TIMER_SetTriggerTarget(TIMER_T *timer, uint32_t u32Mask);

   

   

   







 
#line 13986 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\uart.h"
 








 












 



 



 


 
 
 


























 
 
 



 
 
 






   




 








 









 











 









 










 








 









 









 








 









 










 











 











 









 









 









 



















 



















 





















 








 
__inline void UART_CLEAR_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (0));
}






 
__inline void UART_SET_RTS(UART_T* uart)
{
    uart->MODEM &= ~(0x1ul << (0));
}






 








 



void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag);
void UART_Close(UART_T* uart );
void UART_DisableFlowCtrl(UART_T* uart );
void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag );
void UART_EnableFlowCtrl(UART_T* uart );
void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag );
void UART_Open(UART_T* uart, uint32_t u32baudrate);
uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits);
void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC);
void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction);
void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr);
void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength);
uint32_t UART_Write(UART_T* uart,uint8_t *pu8TxBuf, uint32_t u32WriteBytes);


   

   

   







 
#line 13987 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\wdt.h"
 








 











 



 



 
#line 39 "..\\..\\..\\..\\Library\\StdDriver\\inc\\wdt.h"






   




 






 







 







 








 








 








 









 






 
static __inline void WDT_Close(void)
{
    ((WDT_T *) (((uint32_t)0x40000000) + 0x04000))->CTL = 0;
    return;
}





 
static __inline void WDT_EnableInt(void)
{
    ((WDT_T *) (((uint32_t)0x40000000) + 0x04000))->INTEN = (0x1ul << (0));
    return;
}





 
static __inline void WDT_DisableInt(void)
{
    ((WDT_T *) (((uint32_t)0x40000000) + 0x04000))->INTEN = 0;
    return;
}

void  WDT_Open(uint32_t u32TimeoutInterval,
               uint32_t u32ResetDelay,
               uint32_t u32EnableReset,
               uint32_t u32EnableWakeup);

   

   

   







 
#line 13988 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"
#line 1 "..\\..\\..\\..\\Library\\StdDriver\\inc\\wwdt.h"
 








 











 



 



 
#line 47 "..\\..\\..\\..\\Library\\StdDriver\\inc\\wwdt.h"


   




 






 







 








 








 







 










 



void WWDT_Open(uint32_t u32PreScale, uint32_t u32CmpValue, uint32_t u32EnableInt);


   

   

   







 
#line 13989 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Include\\Nano103.h"



 

#line 3 ".\\nano_support\\Nano_support.h"
#line 4 ".\\nano_support\\Nano_support.h"
#line 5 ".\\nano_support\\Nano_support.h"






 
 
 

 
typedef void (*sleep_fct)(uint32_t t_ms);

 
typedef int64_t (*get_timestamp_us_fct)();

 


 



#line 44 ".\\nano_support\\Nano_support.h"

int8_t I2C_MasterWriteDataToSlave(uint8_t slave_addr, uint8_t regr_addr, uint8_t *write_data, uint16_t data_len);
int8_t I2C_MasterReadDataFromSlave(uint8_t slave_addr, uint8_t regr_addr, uint8_t *reg_data_ptr, uint16_t data_len);
void I2C0_Init(void);
void I2C1_Init(void);
int64_t Get_stamp_us(void);
void delay_ms(uint32_t d_ms);
void I2C_SlaveTRx(uint32_t u32Status);
void I2C_MasterTx(uint32_t u32Status);
void I2C_MasterRx(uint32_t u32Status);
uint8_t I2C_HandleSlaveReadCmd(uint8_t RegAddr, uint8_t* ReturnData);
uint32_t Load_State_from_Flash(uint8_t *state_buffer, uint32_t n_buffer);
uint32_t Load_Config(uint8_t *state_buffer, uint32_t n_buffer);
void Save_State_to_Flash(const uint8_t *state_buffer, uint32_t length);
int set_data_flash_base(uint32_t u32DFBA);
void Output_ready(int64_t timestamp, float iaq, uint8_t iaq_accuracy, float temperature, float humidity,
    float pressure, float raw_temperature, float raw_humidity, float gas, bsec_library_return_t bsec_status);
#line 16 "..\\main.c"
#line 17 "..\\main.c"



 
 
 
void SYS_Init(void)
{

     
    SYS_UnlockReg();

     
    CLK_SetHCLK((0x0UL<<(0)),((((uint32_t)1-1)<<(0)) & (0xful << (0))));

     
    CLK_EnableXtalRC((0x1ul << (0)) | (0x1ul << (1)) | (0x1ul << (2)) | (0x1ul << (24)) | (0x1ul << (25)));

     
    CLK_WaitClockReady((0x1ul << (0)) | (0x1ul << (1)) | (0x1ul << (4)) | (0x1ul << (5)) | (0x1ul << (6)));

     
    CLK_SetCoreClock(32000000);
	  
	   
	  CLK_EnableSysTick((1), 0xFFFFFF);  
	

     
    CLK_EnableModuleClock((( 1UL<<31)|( 1<<29)|( 7<<25)|( 0<<20)|( 0<<18)|( 0xF<<10)|( 8<<5)|(16<<0)));
    CLK_EnableModuleClock((( 1UL<<31)|( 3<<29)|( 0x0<<25)|( 0<<20)|( 3<<18)|( 0x0<<10)|( 0<<5)|( 8<<0)));  
    CLK_EnableModuleClock((( 1UL<<31)|( 3<<29)|( 0x0<<25)|( 0<<20)|( 3<<18)|( 0x0<<10)|( 0<<5)|( 9<<0)));  
		CLK_EnableModuleClock((( 1UL<<31)|( 1<<29)|( 7<<25)|( 8<<20)|( 1<<18)|( 0xF<<10)|( 8<<5)|( 2<<0)));  
		
     
    CLK_SetModuleClock((( 1UL<<31)|( 1<<29)|( 7<<25)|( 0<<20)|( 0<<18)|( 0xF<<10)|( 8<<5)|(16<<0)),(0x3UL<<(0)),((((uint32_t)1-1)<<(8))& (0xful << (8))));
    CLK_SetModuleClock((( 1UL<<31)|( 1<<29)|( 7<<25)|( 8<<20)|( 1<<18)|( 0xF<<10)|( 8<<5)|( 2<<0)), (0x0UL<<(8)), ((((uint32_t)1-1)<<(8)) & (0xful << (8))));

     
     
     
     
    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->GPB_MFPL &= ~( (0xful << (0)) | (0xful << (4)));
    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->GPB_MFPL |= ((0x01UL<<(0)) | (0x01UL<<(4)) );

     
     
     
     
		

     
		((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->GPA_MFPH = ((0x02UL<<(24)) | (0x02UL<<(28)));
    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->GPA_MFPL = ((0x05UL<<(16)) | (0x05UL<<(20)));
		
     
    SYS_LockReg();
}



 
 
 
int32_t main (void)
{ 
	uint8_t a_data;
	return_values_init ret;   
	
	 
  SYS_Init();
  
  TIMER_Open(((TIMER_T *) (((uint32_t)0x40000000) + 0x10000)), (1UL << (4)), 1000);  
  TIMER_EnableInt(((TIMER_T *) (((uint32_t)0x40000000) + 0x10000)));                                     
  NVIC_EnableIRQ(TMR0_IRQn);
  TIMER_Start(((TIMER_T *) (((uint32_t)0x40000000) + 0x10000)));                                         
	
   
  UART_Open(((UART_T *) (((uint32_t)0x40000000) + 0x50000)), 115200);
	 
	printf("+-------------------------------------------------------+\n");
  printf("|    Nano103 IAQ sensor hub										          |\n");
  printf("+-------------------------------------------------------+\n");
  
	
	
	
	
  I2C1_Init();  
	I2C0_Init();  

	I2C_MasterReadDataFromSlave(0x18, 0x00, &a_data, 1);
	printf("adata=%x\n",a_data);
	
  
  
	
	 
	ret = bsec_iot_init((0.33333f), 0.0f, I2C_MasterWriteDataToSlave, I2C_MasterReadDataFromSlave, delay_ms, Load_State_from_Flash, Load_Config);
	if (ret.bme680_status)
  {
		 
    return (int)ret.bme680_status;
  }
  else if (ret.bsec_status)
  {
		     
    return (int)ret.bsec_status;
  }
     
  bsec_iot_loop(delay_ms, Get_stamp_us, Output_ready, Save_State_to_Flash, 10000); 

	while(1);
}



